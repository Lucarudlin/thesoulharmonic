{"18f426cf3ffb4ea5b7a392cbad992a29.script": {"body": "function createSkySphere(goo, ctx, material) {\n     material.cullState.cullFace = 'Front'; // cull the outside, keep the inside\n     material.depthState.enabled = false; // don't change the z-buffer\n     material.renderQueue = 1; // draw this first\n     var skysphere = ctx.world.createEntity(new goo.Sphere(48, 48, 100), material);\n\t skysphere.textureMode = goo.Sphere.TextureModes.Polar;\n      skysphere.isSkybox = true; // activate special handling in renderer and for shadows\n     return skysphere;\n }\n\n var setup = function(args, ctx, goo) {\n\t ctx.deform = 0;\n     var material = new goo.Material('MyMaterial', {\n     attributes: {\n         vertexPosition: goo.MeshData.POSITION,\n         vertexUV0: goo.MeshData.TEXCOORD0\n     },\n     uniforms: {\n         viewMatrix: goo.Shader.VIEW_MATRIX,\n         projectionMatrix: goo.Shader.PROJECTION_MATRIX,\n         worldMatrix: goo.Shader.WORLD_MATRIX,\n         cameraPosition: goo.Shader.CAMERA,\n         near: goo.Shader.NEAR_PLANE,\n         time : function() {return goo.World.time;},\n\t\t deform : function() {return ctx.deform;}\n     },\n     vshader : [\n         'attribute vec3 vertexPosition;',\n         'attribute vec2 vertexUV0;',\n\n         'uniform mat4 viewMatrix;',\n         'uniform mat4 projectionMatrix;',\n         'uniform mat4 worldMatrix;',\n         'uniform vec3 cameraPosition;',\n         'uniform float near;',\n\n         'varying vec2 texCoord0;',\n         'varying vec3 eyeVec;',\n\n         'void main(void) {',\n         '    texCoord0 = vertexUV0;',\n         '    vec4 worldPos = worldMatrix * vec4(vertexPosition * near * 10.0, 1.0);',\n         '    worldPos += vec4(cameraPosition, 0.0);',\n         '    gl_Position = projectionMatrix * viewMatrix * worldPos;',\n         '    eyeVec = cameraPosition - worldPos.xyz;',\n         '}'//\n     ].join('\\n'),\n     fshader : [\n         'uniform float time;',\n\t\t 'uniform float deform;',\n\n         'varying vec2 texCoord0;',\n\n         'vec2 u_k = vec2(10.0,10.0);',\n\t\t 'vec2 u_v = vec2(100.0,100.0);',\n\t\t'#define STARDISTANCE 150.',\n\t\t'#define STARBRIGHTNESS 0.4',\n\t\t'#define STARDENCITY 0.16',\n\t\t'float hash13(vec3 p3)',\n\t\t'{',\n\t\t'\tp3  = fract(p3 * vec3(.1031,.11369,.13787));',\n\t\t'    p3 += dot(p3, p3.yzx + 19.19);',\n\t\t'    return fract((p3.x + p3.y) * p3.z);',\n\t\t'}',\n\t\t'float stars(vec3 ray)',\n\t\t'{',\n\t\t'    vec3 p = ray * STARDISTANCE;',\n\t\t'    float brigtness = smoothstep(1.0 - STARDENCITY, 1.0, hash13(floor(p)));',\n\t\t'    return smoothstep(STARBRIGHTNESS, 0., length(fract(p) - deform/4.5)) * brigtness;',\n\t\t'}',\n\t\t'vec3 camera(vec2 fragCoord)',\n\t\t'{',\n\t\t'\tvec3 ray = normalize(vec3( fragCoord.xy-u_k.xy*.5, u_k.x));',\n\t\t'    vec2 angle = vec2(3. + time * 0.03, 1. + time * 0.01);',\n\t\t'    vec4 cs = vec4(cos(angle.x), sin(-angle.x), cos(angle.y), sin(angle.y));',\n\t\t'    ray.yz *= mat2(cs.xy,-cs.y,cs.x); ',\n \t\t'    ray.xz *= mat2(cs.zw,-cs.w,cs.z); ',\n\t\t'    return ray;',\n\t\t'}',\n\n         'void main() {',\n\t\t \t'float grad = 0.5/texCoord0.y-1.0+deform/40.0;',\n\t\t \t'vec2 x = texCoord0 * u_v - u_v/2.0;',\n// \t\t\t'vec2 x=texCoord0.xy;',\n\t\t\t'vec3 ray = camera(x.xy);',\n\t\t\t'float s = stars(ray);',\n\t\t  'vec4 gradient = vec4(grad, grad, grad, 0.0);',\n         'gl_FragColor = vec4(s, s ,s ,1.0)+gradient;',\n     '}'].join('\\n')\n     });\n\n     ctx.skySphere = createSkySphere(goo, ctx, material);\n     ctx.renderSystem = ctx.world.getSystem('RenderSystem');\n     ctx.renderSystem.added(ctx.skySphere);\n };\n\n var cleanup = function(args, ctx, goo) {\n     ctx.renderSystem.removed(ctx.skySphere);\n };\n\n var update = function(args, ctx, goo) {\n    if (ctx.entityData.freqByte) {\n    for (var i = 0; i < ctx.entityData.freqByte.length; i++) {\n        ctx.deform += Math.abs(ctx.entityData.freqByte[i])/ctx.entityData.freqByte.length;\n    }\n    }\n    else {\n    ctx.freqs = 1;\n    }\n    ctx.deform = (106-ctx.deform)/20;\n };\n\n var parameters = [];", "name": "sky", "license": "CC0", "created": "2016-01-21T14:36:55.529Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-01-21T14:36:55.529Z", "id": "18f426cf3ffb4ea5b7a392cbad992a29.script"}, "041e26d8b95444e3b29420c6a7162ee9.script": {"body": "'use strict';\nvar addBarycentric = function (entity) {\n//     entity.meshDataComponent.meshData = entity.meshDataComponent.meshData.buildFlatMeshData();\n    var meshData = entity.meshDataComponent.meshData;\n\n    meshData.attributeMap.BARYCENTRIC = goo.MeshData.createAttribute(3, 'Float');\n//     meshData.rebuildData(meshData.vertexCount, 0, true);\n\tmeshData.rebuildData(meshData.vertexCount, meshData.indexCount, true);\n    var barycentricBuffer = meshData.getAttributeBuffer('BARYCENTRIC');\n    var vertexCount = meshData.vertexCount;\n    for (var a = 0; a < vertexCount; a += 3) {\n        barycentricBuffer[a * 3 + 0] = 8;\n        barycentricBuffer[a * 3 + 1] = 1;\n        barycentricBuffer[a * 3 + 2] = 1;\n        barycentricBuffer[a * 3 + 3] = 1;\n        barycentricBuffer[a * 3 + 4] = 8;\n        barycentricBuffer[a * 3 + 5] = 1;\n        barycentricBuffer[a * 3 + 6] = 1;\n        barycentricBuffer[a * 3 + 7] = 5;\n        barycentricBuffer[a * 3 + 8] = 1;\n    }\n};\n\nvar wireShaderDef = {\n    processors: [\n        goo.ShaderBuilder.animation.processor\n    ],\n    defines: {\n        SHADOW_TYPE: 0,\n        WEIGHTS: true,\n        JOINTIDS: true,\n\t\tFOG: true\n    },\n    attributes: {\n        vertexPosition: goo.MeshData.POSITION,\n        vertexUV0: goo.MeshData.TEXCOORD0,\n        vertexJointIDs: goo.MeshData.JOINTIDS,\n        vertexWeights: goo.MeshData.WEIGHTS,\n        barycentric: 'BARYCENTRIC'\n    },\n    uniforms: {\n        viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n        worldMatrix: goo.Shader.WORLD_MATRIX,\n        diffuseMap: goo.Shader.DIFFUSE_MAP,\n\t\tfogSettings: goo.ShaderBuilder.FOG_SETTINGS,\n\t\tfogColor: goo.ShaderBuilder.FOG_COLOR,\n        lineWidth: 1,\n        baseColor: [0.0, 0.0, 0.0],\n        lineColor: [1.0, 1.0, 1.0],\n        transparency: false\n    },\n    vshader: [\n        'attribute vec3 vertexPosition;',\n        'attribute vec2 vertexUV0;',\n        'attribute vec3 barycentric;',\n\n        'uniform mat4 viewProjectionMatrix;',\n        'uniform mat4 worldMatrix;',\n\t\t\"uniform vec3 cameraPosition;\",\n\n        'varying vec2 texCoord0;',\n\t\t\"varying vec3 viewPosition;\",\n        'varying vec3 vBC;',\n\n        goo.ShaderBuilder.animation.prevertex,\n\n        'void main(void) {',\n            'mat4 wMatrix = worldMatrix;',\n            goo.ShaderBuilder.animation.vertex,\n            'texCoord0 = vertexUV0;',\n            'vBC = barycentric;',\n\t\t\t\"vec4 worldPos = wMatrix * vec4(vertexPosition, 1.0);\",\n            'gl_Position = viewProjectionMatrix * worldPos;',\n\t\t\t\"viewPosition = cameraPosition - worldPos.xyz;\",\n        '}'\n    ].join('\\n'),\n    fshader: [\n        'uniform sampler2D diffuseMap;',\n        'uniform float lineWidth;',\n        'uniform vec3 baseColor;',\n        'uniform vec3 lineColor;',\n        'uniform bool transparency;',\n\t\t\"varying vec3 viewPosition;\",\n\n        'varying vec2 texCoord0;',\n        'varying vec3 vBC;',\n\t\t\n\t\t'#ifdef FOG',\n\t\t'uniform vec2 fogSettings;',\n\t\t'uniform vec3 fogColor;',\n\t\t'#endif',\n\n        '#extension GL_OES_standard_derivatives : enable',\n\n        'float edgeFactor() {',\n            'vec3 d = fwidth(vBC);',\n            'vec3 a3 = smoothstep(vec3(0.0), d * lineWidth, vBC);',\n            'return 1.0 - min(min(a3.x, a3.y), a3.z);',\n        '}',\n\n        'void main(void) {',\n            'float edge = edgeFactor();',\n            'if (transparency) {',\n                'gl_FragColor = vec4(lineColor, edge);',\n            '} else {',\n                'gl_FragColor.rgb = mix(baseColor, lineColor, edge);',\n                'gl_FragColor.a = 1.0;',\n            '}',\n\t\t\t'#ifdef FOG',\n\t\t\t'float d = pow(smoothstep(fogSettings.x, fogSettings.y, length(viewPosition)+0.3), 1.0);',\n\t\t\t'gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor, d);',\n\t\t\t'#endif',\n        '}'\n    ].join('\\n')\n};\n\nvar setup = function(args, ctx, goo) {\n\t\n\tvar material = new goo.Material('WireShader', wireShaderDef);\n    material.uniforms.lineWidth = args.lineWidth;\n    material.uniforms.baseColor = args.baseColor;\n    material.uniforms.lineColor = args.lineColor;\n    material.uniforms.transparency = args.transparency;\n    if (args.transparency) {\n        material.blendState.blending = 'TransparencyBlending';\n        material.renderQueue = goo.RenderQueue.TRANSPARENT;\n    }\n\t\n\tctx.oldMesh = ctx.entity.meshDataComponent.meshData;\n\tvar Surface = Mesh(goo);\n\tctx.mesh = new Surface(args.size[0], args.size[1], args.gridX, args.gridZ);\n\tctx.entity.meshDataComponent.meshData = ctx.mesh;\n\tctx.entity.meshDataComponent.autoCompute = true;\n\taddBarycentric(ctx.entity);\n\t\n\tctx.entity.meshRendererComponent.materials[0] = material; \n};\n\nvar cleanup = function(args, ctx, goo) {\n\tctx.source.stop(0);\n\tctx.context.close();\n\tctx.entity.meshDataComponent.meshData = ctx.oldMesh;\n\tctx.entity.meshDataComponent.autoCompute = true;\n\tctx.mesh.destroy(ctx.world.gooRunner.renderer.context);\n};\n\nvar update = function(args, ctx, goo) {\n\tctx.dataArray = ctx.entityData.freqByte;\n// \tctx.analyser.getByteFrequencyData(ctx.dataArray);\n//\tvar t = Math.abs(Math.floor((goo.World.time-Math.floor(goo.World.time))*args.gridZ));\n//  \tctx.y = (ctx.y + 1) % args.gridZ;\n\tvar verts = ctx.mesh.verts;\n\tvar pos = ctx.mesh.getAttributeBuffer('POSITION');\n\tif (ctx.dataArray) {\n\t\t\n\t\t\n\t\tfor (var k = args.gridZ * args.gridX;k > args.gridX; k--) {\n\t\t\tpos[(k * 3) + 1] = pos[(k-args.gridX) * 3 + 1];\n\t\t}\n\n\t\tfor (var k = 0; k < args.gridX; k++) {\n\t\t\tpos[(k * 3)+1] = ctx.dataArray[k]/args.height;\n\t\t}\n\t\n\t\tctx.mesh.rebuildNormals();\n\t\tctx.mesh.setAttributeDataUpdated('POSITION');\n\t\tctx.mesh.setAttributeDataUpdated('NORMAL');\n\t\t\n\t}\n};\n\nvar parameters = [{\n\tkey: 'size',\n\ttype: 'vec2',\n\tdefault: [1,1]\n}, {\n\tkey: 'gridX',\n\ttype: 'int',\n\tmin: 2,\n\t'default': 8\n}, {\n\tkey: 'gridZ',\n\ttype: 'int',\n\tmin: 2,\n\t'default': 8\n},\n{\n\tkey: 'height',\n\ttype: 'int',\n\tdefault: 300\n},\n    { key: 'lineWidth', type: 'float', default: 1 },\n    { key: 'baseColor', type: 'vec3', control: 'color', default: [0, 0, 0] },\n    { key: 'lineColor', type: 'vec3', control: 'color', default: [1, 1, 1] },\n    { key: 'transparency', type: 'boolean', default: false }\t\t\t\t \n];\n\nvar Mesh = function(goo) {\n\tvar MeshData = goo.MeshData;\n\tvar Vector3 = goo.Vector3;\n\n\tfunction MySurface(sizeX, sizeZ, countX, countZ) {\n\t\tthis.sizeX = sizeX = sizeX || 1;\n\t\tthis.sizeZ = sizeZ = sizeZ || 1;\n\t\tthis.countX = countX = countX || 2;\n\t\tthis.countZ = countZ = countZ || 2;\n\t\t\n\t\tthis.xy = new goo.Vector3();\n\t\tthis.zy = new goo.Vector3();\n\t\tthis.normal = new goo.Vector3();\n\t\t\n\t\tvar nVerts = countX * countZ;\n\t\tvar nIndices = (countX - 1) * (countZ - 1) * 6;\n\t\tvar attributeMap = MeshData.defaultMap(['POSITION', 'NORMAL', 'TEXCOORD0']);\n\t\tMeshData.call(this, attributeMap, nVerts, nIndices);\n\t\t\n\t\tthis.rebuild();\n\t}\n\t\n\tMySurface.prototype = Object.create(MeshData.prototype);\n\tMySurface.prototype.constructor = MySurface;\n\t\n\tMySurface.prototype.rebuild = function() {\n\t\tthis.rebuildIndices();\n\t\tthis.rebuildPositions();\n\t\tthis.rebuildTexCoords();\n\t\tthis.rebuildNormals();\n\t};\n\t\n\tMySurface.prototype.rebuildPositions = function() {\n\t\tvar len = this.countX * this.countZ;\n\t\tvar pos = this.getAttributeBuffer('POSITION');\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tpos[i*3] = this.sizeX * ((i % this.countX) / (this.countX-1) - 0.5);\n\t\t\tpos[i*3+1] = 0;\n\t\t\tpos[i*3+2] = this.sizeZ * (- Math.floor(i / this.countX) / (this.countZ - 1) + 0.5);\n\t\t}\n\t};\n\t\n\tMySurface.prototype.rebuildTexCoords = function() {\n\t\tvar len = this.countX * this.countZ;\n\t\tvar tex = this.getAttributeBuffer('TEXCOORD0');\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\ttex[i*2] = (i % this.countX) / (this.countX - 1);\n\t\t\ttex[i*2+1] = Math.floor(i / this.countX) / (this.countZ - 1);\n\t\t}\n\t};\n\t\n\tMySurface.prototype.rebuildNormals = function() {\n\t\tvar len = this.countX * this.countZ;\n\t\tvar norm = this.getAttributeBuffer('NORMAL');\n\t\tvar pos = this.getAttributeBuffer('POSITION');\n\t\tvar xStep = this.sizeX / (this.countX - 1);\n\t\tvar zStep = this.sizeZ / (this.countZ - 1);\n\t\tvar x, y, z;\n\t\tvar j;\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tj = 3 * i + 1;\n\t\t\tif (i < this.countX) { // First row\n\t\t\t\tz = (pos[j + this.countX*3] - pos[j]) / zStep;\n\t\t\t} else if (i >= this.countX * (this.countZ - 1)) { // Last row\n\t\t\t\tz = (pos[j] - pos[j - this.countX*3]) / zStep;\n\t\t\t} else {\n\t\t\t\tz = (pos[j + this.countX*3] - pos[j - this.countX*3]) / (2 * zStep);\n\t\t\t}\n\t\t\tif (i % this.countX === 0) {\n\t\t\t\tx = (pos[j + 3] - pos[j]) / xStep;\n\t\t\t} else if (i % this.countX === this.countX - 1) {\n\t\t\t\tx = (pos[j] - pos[j - 3]) / xStep;\n\t\t\t} else {\n\t\t\t\tx = (pos[j + 3] - pos[j - 3]) / (2 * xStep);\n\t\t\t}\n\t\t\tvar tot = Math.sqrt(x*x + 1 + z*z);\n\t\t\tnorm[i*3] = -x / tot;\n\t\t\tnorm[i*3+1] = 1 / tot;\n\t\t\tnorm[i*3+2] = z / tot;\n\t\t}\n\t};\n\t\n\tMySurface.prototype.rebuildIndices = function() {\n\t\tvar idcs = this.getIndexBuffer();\n\t\tvar j = 0;\n\t\tfor (var i = 0; i < this.countX * this.countZ; i++) {\n\t\t\tif ((i+1) % this.countX === 0) { continue; }\n\t\t\tif (i >= this.countX) {\n\t\t\t\tidcs[j++] = i;\n\t\t\t\tidcs[j++] = i - this.countX + 1;\n\t\t\t\tidcs[j++] = i + 1;\n\t\t\t}\n\t\t\tif (i < this.countX * (this.countZ - 1)) {\n\t\t\t\tidcs[j++] = i;\n\t\t\t\tidcs[j++] = i + 1;\n\t\t\t\tidcs[j++] = i + this.countX;\n\t\t\t}\n\t\t}\n\t};\n\t\n\treturn MySurface;\n};", "name": "sound_terrain_f", "license": "CC0", "created": "2016-01-16T17:49:23.374Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-01-16T17:49:23.374Z", "id": "041e26d8b95444e3b29420c6a7162ee9.script"}, "33fa48e5c0dd483ca4992c9ef2000719.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0, 0, 0, 1]}, "materialSpecular": {"enabled": true, "value": [0, 0, 0, 1]}, "fresnel": {"enabled": true, "value": 0.5}, "reflectivity": {"enabled": true, "value": 0}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.47135416666666663, 0.47135416666666663, 0.47135416666666663, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Default Material", "license": "CC0", "created": "2016-01-16T17:52:42.180Z", "deleted": false, "id": "33fa48e5c0dd483ca4992c9ef2000719.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "NoBlending"}, "modified": "2016-01-16T17:52:42.180Z", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {}, "renderQueue": -1}, "815b82d3a16f43988ad89a62417a6e6e.entity": {"name": "Directional 0", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-05-22T14:00:54.685678+00:00", "dataModelVersion": 2, "modified": "2015-05-26T13:02:06.366729+00:00", "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.8, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-38, 21, -18], "scale": [1, 1, 1], "translation": [16, 20.5, 23.3]}}, "hidden": false, "id": "815b82d3a16f43988ad89a62417a6e6e.entity"}, "1216db2f52ae4b099bfe69fdd7262c31.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0}, "reflectivity": {"enabled": true, "value": 0}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0.8, 0.8, 0.8, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material 2", "license": "CC0", "created": "2015-06-25T08:21:43.700210+00:00", "deleted": false, "id": "1216db2f52ae4b099bfe69fdd7262c31.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "NoBlending"}, "modified": "2015-06-25T08:21:45.518272+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {"NORMAL_MAP": {"enabled": true, "textureRef": "bd43f5e55e5f48129aa880cbb8d826b9.texture"}}, "renderQueue": -1}, "35f657ee3acc453c931ee8e2d17ed397.entity": {"name": "Default Camera", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-05-22T14:00:59.871Z", "dataModelVersion": 2, "modified": "2015-05-26T15:09:56.847228+00:00", "static": false, "components": {"camera": {"fov": 40, "lockedRatio": false, "far": 1000, "followEditorCam": false, "projectionMode": "Perspective", "near": 0.01, "aspect": 1, "size": 5}, "transform": {"rotation": [0, 180, 0], "scale": [1, 1, 1], "translation": [0.073475777840351, 0.6644222840363648, -2.0505784705655477]}, "script": {"scripts": {"906d3381e3734cd48904d34278284ed6.scriptinstance": {"id": "906d3381e3734cd48904d34278284ed6.scriptinstance", "name": "Instance of 'OrbitCamControlScript'", "scriptRef": "GOO_ENGINE_SCRIPTS/OrbitCamControlScript", "sortValue": 0, "options": {"maxAscent": 89.99, "whenUsed": true, "orbitSpeed": 0.005, "clampAzimuth": false, "maxAzimuth": 270, "minZoomDistance": 1, "enabled": false, "minAzimuth": 90, "minAscent": -89.99, "lookAtDistance": 15, "drag": 0.9, "dragButton": "Any", "zoomSpeed": 1, "smoothness": 0.4, "maxZoomDistance": 1000}}}}}, "hidden": false, "id": "35f657ee3acc453c931ee8e2d17ed397.entity"}, "084c28fcfec4441c8e40eeb8192835a0.script": {"body": "'use strict';\n\n  var setup = function(args, ctx, goo) {\n     \n     if( ! ctx.world.getSystem('PortalSystem')) {\n         ctx.world.setSystem(new goo.PortalSystem(ctx.world.gooRunner.renderer,\n             ctx.world.getSystem('RenderSystem')));\n     }\n     \n     var cam = ctx.activeCameraEntity.cameraComponent.camera;\n     ctx.portalComponent = new goo.PortalComponent(cam, 500, { preciseRecursion: true });\n     ctx.entity.setComponent(ctx.portalComponent);\n };\n \n var cleanup = function(args, ctx, goo) {\n     ctx.entity.clearComponent(ctx.portalComponent);\n };\n \n var update = function(args, ctx, goo) {\n };\n \n var parameters = [];\n", "name": "portal", "license": "CC0", "created": "2016-01-22T13:23:26.692Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-01-22T13:23:26.692Z", "id": "084c28fcfec4441c8e40eeb8192835a0.script"}, "c1dd73ceb71d4e0e8b3e3e349ec08d69.script": {"body": "var rotationState = {\n    x:0,\n    y:0,\n    rx:0,\n    ry:0\n};\n\nvar initialOffset;\n\nvar onMove =function(e) {\n    rotationState.x = e.clientX;\n    rotationState.y = e.clientY;\n};\n\n\nvar setup =function(args, ctx, goo) {\n\tctx.center = ctx.world.by.name('center').first();\n    window.addEventListener('mousemove', onMove);\n    initialOffset = ctx.center.transformComponent.transform.rotation.toAngles();\n    initialOffset.x +=0.00;\n    initialOffset.y +=0.00;\n};\n\nvar cleanup =function(args, ctx, goo) {\n    window.removeEventListener('mousemove', onMove);\n};\n\nvar update =function(args, ctx, goo) {\n    rotationState.rx += (rotationState.x - rotationState.rx) / args.smoothness;\n    rotationState.ry += (rotationState.y - rotationState.ry) / args.smoothness;\n\n    ctx.center.setRotation(\n        (rotationState.ry) /-args.divider + initialOffset.x, (rotationState.rx) /-args.divider + initialOffset.y,\n        initialOffset.z\n    );\n};\n\nvar parameters = [{\n    key:'smoothness',\n    type:'float',\n    control:'slider',\n    default:16,\n    min:0.1,\n    max:64\n}, {\n    key:'divider',\n    type:'float',\n    control:'slider',\n    default:1000,\n    min:100,\n    max:10000\n}];\n", "name": "camera_look", "license": "CC0", "created": "2015-06-20T09:41:30.821093+00:00", "deleted": false, "modified": "2015-06-20T09:58:22.790175+00:00", "originalAsset": {"version": "c55972d9eb104ef8a477804ce94a2815", "id": "0c5f07f029264ef2b58be8ea68cb0848.script"}, "dataModelVersion": 2, "dependencies": {}, "id": "c1dd73ceb71d4e0e8b3e3e349ec08d69.script"}, "3a4f5a6eb9494bcd98f12ebfe675fa71.script": {"body": "/**\n * Implement this method to do initializing.\n * Called when pressing play and when running exported projects.\n */\nvar setup = function(args, ctx, goo) {\n\t// exit early if they're on\n\tif (ctx.world.gooRunner.stats) { return; }\n\t\n\tvar stats = new goo.Stats();\n\tstats.domElement.style.position = 'absolute';\n\tstats.domElement.style.left = '10px';\n\tstats.domElement.style.top = '10px';\n\tdocument.body.appendChild(stats.domElement);\n\t\n\tctx.world.gooRunner.stats = stats;\n};\n\n/**\n * Implement this method to do cleanup. Called on script stop and delete.\n */\nvar cleanup = function(args, ctx, goo) {\n\tif (!args.keep) {\n\t\tvar stats = ctx.world.gooRunner.stats;\n\t\tctx.world.gooRunner.stats = null;\n\t\tstats.domElement.parentNode.removeChild(stats.domElement);\n\t}\n};\n\n/**\n * This function will be called every frame.\n *\n * @param {object} args\n * Contains all the parameters defined in the 'parameters' variable below.\n * Its values are chosen in the scripts panel.\n *\n * @param {object} ctx\n * A contextual data object, unique for the script.\n * Properties on this object will be shared between the script's functions.\n * {\n *   entity: Entity,\n *   world: World,\n *   domElement: canvas,\n *   viewportWidth: number,\n *   viewportHeight: number,\n *   activeCameraEntity: Entity,\n *\n *   worldData: object,\n *              // Accessible to all scripts in the world.\n *\t\t\t\t// Example: ctx.worldData.helloString = 'hello';\n *\n *   entityData: object\n *               // Accessible to all scripts on this entity.\n * }\n *\n * @param {object} goo\n * Contains most useful engine classes like goo.Vector3, goo.Matrix3x3, etc.\n * See API documentation for more info on the classes.\n */\nvar update = function(args, ctx, goo) {\n};\n\n/**\n * Parameters defined here will be available on the 'args' object as 'args.key'\n * and customizable using the script panel. Parameters are defined like below.\n * 'key', 'type', and 'default' are required properties.\n * {\n *   key: string,\n *   name: string,\n *   type: enum ('int', 'float', 'string', 'boolean', 'vec3'),\n *   control: enum (\n *    'slider', // Slider with min and max values.\n *    'color',  // Color picker for RGB vec3.\n *    'select', // Used together with the 'options' property.\n *   ),\n *   options: *[] // Array of values of specified type.\n *   default: *, // Preselected value. One of the options if options are used.\n *   min: number, // Can be used when data type is float or int.\n *   max: number, // Can be used when data type is float or int.\n *   scale: number, // How fast number values will change when dragged.\n *   exponential: boolean // Used together with slider.\n * }\n */\nvar parameters = [{\n\tkey: 'keep',\n\tname: 'Keep stats',\n\ttype: 'boolean'\n}];", "name": "Custom script", "license": "CC0", "created": "2014-07-02T10:41:29+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2014-07-03T13:23:10+00:00", "dependencies": {}, "id": "3a4f5a6eb9494bcd98f12ebfe675fa71.script"}, "1e1773e6066f4ef6b45e53abf528c114.script": {"body": "'use strict';\n\n/* global goo */\n\nvar setup = function (args, ctx) {\n\tctx.count = 0;\n\tctx.objects = [];\n// \tctx.w = 2;\n//     ctx.h = 8;\n\n//     ctx.freqs = 1;\n//     ctx.deform = 1;\n\n//     ctx.colorInfo = new Uint8Array(ctx.w * ctx.h * 4);\n//     ctx.tex = new goo.Texture(ctx.colorInfo, null, ctx.w, ctx.h);\n// \tctx.material = new goo.Material('simpleSound', simpleSound);\n// \tctx.material.setTexture('DIFFUSE_MAP', ctx.tex);\n// \tctx.material.wireframe = true;\n//     ctx.material.uniforms.lineWidth = args.lineWidth;\n//     ctx.material.uniforms.baseColor = args.baseColor;\n//     ctx.material.uniforms.lineColor = args.lineColor;\n//     ctx.material.uniforms.transparency = args.transparency;\n//     if (args.transparency) {\n//         ctx.material.blendState.blending = 'TransparencyBlending';\n//         ctx.material.renderQueue = goo.RenderQueue.TRANSPARENT;\n//     }\n};\n\nvar cleanup = function (args, ctx) {\n\tfor (var k in ctx.objects) {\n\t\tctx.objects[k].removeFromWorld();\n\t}\n};\n\nvar update = function (args, ctx) {\n\tctx.musicTime = goo.World.time - ctx.entityData.musicStart;\n\tif(ctx.entityData.comments)\n\t\t{\n\t\t\tfor (var i=0; i<ctx.entityData.comments.length; i++) {\n// \t\t\t\tconsole.log(ctx.entityData.comments[i].timestamp);\n// \t\t\t\tconsole.log(ctx.entityData.comments[i]);\n// \t\t\t\t  for (var k = 0; k < ctx.colorInfo.length; k++) {\n// \t\t\t\t\tctx.colorInfo[k * 4 + 0] = Math.abs(ctx.freqs[k+i]); // red\n// \t\t\t\t\tctx.colorInfo[k * 4 + 1] = Math.sin(goo.World.time)*255; // green\n// \t\t\t\t\tctx.colorInfo[k * 4 + 2] = Math.cos(goo.World.time)*255; // blue\n// \t\t\t\t\tctx.colorInfo[k * 4 + 3] = 255; // alpha\n// \t\t\t\t  }\n\t\t\t\tif (Math.ceil(ctx.entityData.comments[i].timestamp/10) == Math.ceil(ctx.musicTime*100)) {\n// \t\t\t\t\tconsole.log(ctx.entityData.comments[i].body);\n//\t\t\t\t\tctx.count = 1;\n\t\t\t\t\tvar htmlElement = document.createElement('p');\n\t\t\t\t\thtmlElement.style.position = 'absolute';\n// \t\t\t\t\thtmlElement.style.color = 'white';\n\t\t\t\t\thtmlElement.classList.add('comments');\n// \t\t\t\t\thtmlElement.style['-webkit-user-select'] = 'none';\n\t\t\t\t\thtmlElement.innerHTML = ctx.entityData.comments[i].body;\n\t\t\t\t\tdocument.body.appendChild(htmlElement);\n\t\t\t\t\tvar htmlComponent = new goo.HtmlComponent(htmlElement);\n\t\t\t\t\t\n\t\t\t\t\tctx.objects.push(ctx.world.createEntity(new goo.Sphere(16, 16, 0.1), new goo.Material(goo.ShaderLib.simpleLit), [ (Math.random(i)-0.5)*4, Math.random(i)+0.1, 3]).set(htmlComponent).addToWorld());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t \tfor (var j in ctx.objects) {\n\t\t\t\t\t\tctx.objects[j].addTranslation( 0, 0, -ctx.world.tpf*1.5); \n\t\t\t\t\tif (ctx.objects[j].transformComponent.transform.translation.z < -2) {\n\t\t\t\t\t\tctx.objects[j].removeFromWorld();\n\t\t\t\t\t}\n\t\t\t}\n// \tif (!ctx.entityData.freqFloat)\n// \t\t\t{ctx.freqs = 1;}\n//     else {\n//         ctx.freqs = ctx.entityData.freqFloat;\n//     }\n//     ctx.tex.setNeedsUpdate();\n};\n\nvar parameters = [\n\t{ key: 'lineWidth', type: 'float', default: 1 },\n    { key: 'baseColor', type: 'vec3', control: 'color', default: [0, 0, 0] },\n    { key: 'lineColor', type: 'vec3', control: 'color', default: [1, 1, 1] },\n    { key: 'transparency', type: 'boolean', default: false }\n\t\n];\n\nvar simpleSound = {\nattributes: {\n       vertexPosition: goo.MeshData.POSITION,\n       vertexUV0: goo.MeshData.TEXCOORD0,\n       vertexNormal: goo.MeshData.NORMAL\n    },\n    uniforms: {\n       viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n       worldMatrix: goo.Shader.WORLD_MATRIX,\n       diffuseMap: 'DIFFUSE_MAP',\n       time : function() {return goo.World.time;},\n    },\n    vshader : [\n        'attribute vec3 vertexPosition;',\n        'attribute vec2 vertexUV0;',\n        \"attribute vec3 vertexNormal;\",\n        'varying vec2 texCoord0;',\n        'uniform mat4 viewProjectionMatrix;',\n        'uniform mat4 worldMatrix;',\n        'uniform float size;',\n        'uniform float deform;',\n        'uniform sampler2D diffuseMap;',\n        'void main(void) {',\n            'texCoord0 = vertexUV0;',\n            'float scale = 1.0;',\n            'float bias = 0.2;',\n            'float h = 0.0;',\n            'h = scale * ((texture2D(diffuseMap, texCoord0).r) - bias);',\n//             'clamp(h, 0.0, 1.0);',\n            \"vec4 worldPos = worldMatrix * vec4(vertexPosition, 1.0);\",\n            'worldPos.xyz += vertexNormal*h/10.0;',\n            'gl_Position = viewProjectionMatrix * worldPos;',\n//             'gl_PointSize = size / gl_Position.w;',\n        '}'\n        ].join('\\n'),\n\n    fshader : [\n        'uniform float time;',\n        'uniform float deform;',\n        'uniform sampler2D diffuseMap;',\n        'varying vec2 texCoord0;',\n\n        'void main( void ) {',\n            'vec3 color = texture2D(diffuseMap, texCoord0).rgb;',\n            'gl_FragColor = vec4(color*2.0,1.0);',\n        '}',\n        ].join('\\n')\n};", "name": "comments 2", "license": "CC0", "created": "2016-02-10T13:20:38.434Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-02-10T13:20:38.434Z", "id": "1e1773e6066f4ef6b45e53abf528c114.script"}, "d873a31fb7d44cdf935986da0555c1b9.script": {"body": "'use strict';\n\nvar setup = function(args, ctx, goo) {\n\tvar ID = 'c7259dc3177e511b9ad3e4c91f0206ce';\n\t//ID = 'YOUR_CLIENT_ID';\n\tctx.ajax = new goo.Ajax();\n\tctx.get = function(url) {\n\t\treturn ctx.ajax.get({\n\t\t\turl: url,\n\t\t}).then(function(req) {\n\t\t\tvar resp = req.response || req.responseText;\n\t\t\ttry {\n\t\t\t\tresp = JSON.parse(resp);\n//   \t\t\t\tconsole.log(resp);\n\t\t\t} catch (e) {}\n\t\t\treturn resp;\n\t\t});\n\t};\n\t\n\tctx.soundCreator = new goo.SoundCreator();\n\t\n\tfunction createSound (url) {\n\t\t// Get file\n\t\treturn ctx.ajax.get({\n\t\t\turl: url + qstr({\n\t\t\t\tclient_id: ID\n\t\t\t}),\n\t\t\tresponseType: 'arraybuffer'\n\t\t}).then(function (req) {\n\t\t\tvar buffer = req.response;\n\t\t\t// Decode buffer\n\t\t\treturn goo.PromiseUtil.createPromise(function (resolve, reject) {\n\t\t\t\tgoo.AudioContext.getContext().decodeAudioData(buffer, function (audioBuffer) {\n\t\t\t\t\tresolve(audioBuffer);\n\t\t\t\t\tdocument.getElementById('title').innerHTML = ctx.sTitle;\n\t\t\t\t}, function (/*err*/) {\n\t\t\t\t\tconsole.error('Could not decode audio ' + url);\n\t\t\t\t\tresolve(null);\n\t\t\t\t});\n\t\t\t});\n\t\t}).then(function (buffer) {\n\t\t\t// Make sound\n\t\t\tvar sound = new goo.Sound();\n\t\t\tsound.setAudioBuffer(buffer);\n\t\t\treturn sound;\n\t\t});\n\t}\n\t\n\tfunction qstr(params) {\n\t\tvar arr = [];\n\t\tfor (var key in params) {\n\t\t\tarr.push(key +'='+ encodeURIComponent(params[key]));\t\n\t\t}\n\t\treturn '?' + arr.join('&');\n\t}\t\n\tfunction getAudio (url) {\n\t\tvar base = '//api.soundcloud.com/';\n\t\treturn ctx.get(base + 'resolve' + qstr({\n\t\t\turl: url,\n\t\t\tclient_id: ID\n\t\t})).then(function (resp) {\n \t\t\tctx.sTitle = resp.title;\n\t\t\tctx.trackID = resp.id;\n\t\t\treturn resp.stream_url;\n\t\t});\n\t}\n\tfunction getComments (url) {\n\t\tvar base = '//api.soundcloud.com/';\n\t\treturn ctx.get('https://api.soundcloud.com/tracks/'+ctx.trackID+'/comments/?client_id='+ID).then(function (resp2) {\n\t\t\tctx.entityData.comments = resp2;\n\t\t\tctx.entityData.musicStart = goo.World.time;\n\t\t\treturn resp2;\n\t\t});\n\t}\n\t\tfunction getRelated (url) {\n\t\tvar base = '//api.soundcloud.com/';\n\t\treturn ctx.get('https://api.soundcloud.com/tracks/'+ctx.trackID+'/related?client_id='+ID).then(function (resp3) {\n\t\t\tctx.entityData.related = resp3;\n\t\t\treturn resp3;\n\t\t});\n\t}\n\t\n\tvar material = new goo.Material(goo.ShaderLib.uber);\n// \tctx.comments = [];\n// \tctx.timestamp = [];\n\n\t\n\tgetAudio(args.url).then(createSound).then(function (sound) {\n\t\tctx.sound = sound;\n\t\tctx.entity.soundComponent.addSound(sound);\n\t\tsound.fadeIn(2);\n\t})\n \t\t.then(getRelated).then(getComments);\n\t\n\tctx.change=function(relatedUrl) {\n\t\tconsole.log(relatedUrl);\n\t\tif (ctx.sound) {\n\t\tctx.sound.stop();\n\t\tctx.entity.soundComponent.removeSound(ctx.sound);\n\t\t}\n\t\tgetAudio(relatedUrl).then(createSound).then(function (sound) {\n\t\tctx.sound = sound;\n\t\tctx.entity.soundComponent.addSound(sound);\n\t\tsound.fadeIn(2);\n\t})\n \t\t.then(getRelated).then(getComments);\n\t};\n\n\t\tgoo.SystemBus.addListener('loadSound', ctx.change);\n// \tvar commentsUrl = args.url+'/comments/';\n// \tgetComments(commentsUrl);\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tif (ctx.sound) {\n\t\tctx.sound.stop();\n\t\tctx.entity.soundComponent.removeSound(ctx.sound);\n\t}\n\tgoo.SystemBus.removeListener('loadSound', ctx.change);\n};\n\nvar update = function(args, ctx, goo) {\n// console.log(Math.floor(goo.World.time*100));\n//  console.log(ctx.playTime);\n//  \tconsole.log(ctx.comments.length);\n};\n\nvar parameters = [{\n\tkey: 'url',\n\ttype: 'string',\n\t'default': 'https://soundcloud.com/benlukasboysen/sets/gravity-preview'\n}];", "name": "Sound Cloud connector", "license": "CC0", "created": "2015-06-12T07:54:36.440Z", "deleted": false, "dataModelVersion": 2, "originalAsset": {"version": "51dff0bc2495420ba2e4ee9b7db4e759", "id": "29e43ff100ab4644be44995c32f908e4"}, "modified": "2015-06-18T09:52:07.372836+00:00", "dependencies": {"https://connect.soundcloud.com/sdk/sdk-3.0.0.js": {"url": "https://connect.soundcloud.com/sdk/sdk-3.0.0.js", "sortValue": 0}}, "id": "d873a31fb7d44cdf935986da0555c1b9.script"}, "796fc9ff440c4407b31444984a4d4be3.entity": {"name": "center", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-01-21T16:39:01.636Z", "dataModelVersion": 2, "modified": "2016-01-21T16:39:01.636Z", "static": false, "components": {"transform": {"rotation": [7, 12, 0], "scale": [1, 1, 1], "translation": [-0.1934722661972046, -0.02131645567715168, -1], "children": {"35f657ee3acc453c931ee8e2d17ed397.entity": {"entityRef": "35f657ee3acc453c931ee8e2d17ed397.entity", "sortValue": 0}}}, "script": {"scripts": {"652da7c0d80e4ffa8bc682c70bb50288.scriptinstance": {"id": "652da7c0d80e4ffa8bc682c70bb50288.scriptinstance", "name": "Instance of camera_look", "scriptRef": "c1dd73ceb71d4e0e8b3e3e349ec08d69.script", "sortValue": 0, "options": {"divider": 5000, "enabled": true, "smoothness": 16}}}}}, "hidden": false, "thumbnailRef": "af3902f28ceb2bd0875e0acd508aaf45a5862a4b.png", "id": "796fc9ff440c4407b31444984a4d4be3.entity"}, "63a10bc3866944b6ada7c46d267dcebd.material": {"flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [0.1, 0.1, 0.1, 1]}, "materialSpecular": {"enabled": true, "value": [0.6, 0.6, 0.6, 1]}, "fresnel": {"enabled": true, "value": 0.26}, "reflectivity": {"enabled": true, "value": 0.75}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Default Material 2", "license": "CC0", "created": "2016-01-21T12:42:00.705Z", "deleted": false, "id": "63a10bc3866944b6ada7c46d267dcebd.material", "wireframe": false, "dataModelVersion": 2, "blendState": {"blendDst": "OneMinusSrcAlphaFactor", "blendSrc": "SrcAlphaFactor", "blendEquation": "AddEquation", "blending": "NoBlending"}, "modified": "2016-01-21T12:42:00.705Z", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "texturesMapping": {}, "renderQueue": -1}, "f17871dc9b9049cc9761db4c7b0cd4d6.entity": {"name": "Directional 1", "license": "CC0", "created": "2015-05-22T14:00:54.645099+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-05-22T14:00:54.645099+00:00", "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.4, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "DirectionalLight", "shadowSettings": {"fov": 55, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"rotation": [-31, 129, 0], "scale": [1, 1, 1], "translation": [15, 11.6, -12.2]}}, "hidden": false, "id": "f17871dc9b9049cc9761db4c7b0cd4d6.entity"}, "83bb5f95b2164acf8187949dd6e08d27.entity": {"name": "Default Lights", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-05-22T14:00:54.656348+00:00", "dataModelVersion": 2, "modified": "2015-05-22T14:00:54.656348+00:00", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {"f17871dc9b9049cc9761db4c7b0cd4d6.entity": {"entityRef": "f17871dc9b9049cc9761db4c7b0cd4d6.entity", "sortValue": 1}, "815b82d3a16f43988ad89a62417a6e6e.entity": {"entityRef": "815b82d3a16f43988ad89a62417a6e6e.entity", "sortValue": 0}}}}, "hidden": true, "id": "83bb5f95b2164acf8187949dd6e08d27.entity"}, "79c0ed21b259418eb5e957a5e29e7b16.script": {"body": "// Add external resource: https://code.gooengine.com/0.12.6/lib/waterpack.js\nvar setup = function(args, ctx, goo) {\n\tctx.world.gooRunner.callbacksNextFrame.push(function () \n\t{\n\t\tif(undefined === goo.FlatWaterRenderer){\n\t\t\tconsole.warn('Need to include the waterpack.js as an external resource!');\n\t\t\tconsole.warn('https://code.gooengine.com/latest/lib/waterpack.js');\n\t\t} else {\n\t\t\tvar settings = {\n\t\t\t\tdivider: args.divider,\n\t\t\t\tupdateWaterPlaneFromEntity: false,\n\t\t\t\tuseRefraction: args.useRefraction\n\t\t\t};\n\t\t\tif (args.tex) {\n\t\t\t\tsettings.normalsTexture = args.tex;\n\t\t\t}\n\t\t\tvar waterRenderer = new goo.FlatWaterRenderer(settings);\n\t\t\twaterRenderer.followCam = false;\n\t\t\twaterRenderer.waterMaterial.setTexture('NORMAL_MAP', args.tex);\n\t\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.waterScale = args.waterScale;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.waterColor = args.waterColor;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.timeMultiplier = args.timeMultiplier;\n\t\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.distortionMultiplier = args.distortionMultiplier;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.fresnelPow = args.fresnelPow;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.normalMultiplier = args.normalMultiplier;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.fresnelMultiplier = args.fresnelMultiplier;\n\t\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.sunDirection = args.sunDirection;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.sunSpecPower = args.sunSpecPower;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.sunColor = args.sunColor;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.sunShininess = args.sunShininess;\n\t\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.doFog = args.doFog;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.fogColor = args.fogColor;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.fogStart = args.fogStart;\n\t\t\twaterRenderer.waterMaterial.shader.uniforms.fogScale = args.fogScale;\n\t\n\t\t\tctx.world.gooRunner.renderSystem.preRenderers.push(waterRenderer);\n\t\t\n\t\t\twaterRenderer.setWaterEntity(ctx.entity);\n\t\t\t\n\t\t\tvar all = ctx.world.gooRunner.world.getEntities();\n\t\t\tfor (var i = 0; i < all.length; i++) {\n\t\t\t\tvar ent = all[i];\n\t\t\t\tif (ent !== ctx.entity && ent.meshRendererComponent) {\n\t\t\t\t\tent.meshRendererComponent.isReflectable = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar rEnts = ctx.world.gooRunner.renderSystem._activeEntities;\n\t\t\tfor (i = 0; i < rEnts.length; i++) {\n\t\t\t\tvar rEnt = rEnts[i];\n\t\t\t\tif (rEnt.name === 'Skybox_sphere' || rEnt.name === 'Skybox_box') {\n\t\t\t\t\tvar depthState = rEnt.meshRendererComponent.materials[0].depthState.enabled;\n\t\t\t\t\tvar renderQueue = rEnt.meshRendererComponent.materials[0].renderQueue;\n\t\t\t\t\tvar cullMode = rEnt.meshRendererComponent.cullMode;\n\t\t\t\t\twaterRenderer.setSkyBox(rEnt);\n\t\t\t\t\trEnt.meshRendererComponent.materials[0].depthState.enabled = depthState;\n\t\t\t\t\trEnt.meshRendererComponent.materials[0].renderQueue = renderQueue;\n\t\t\t\t\trEnt.meshRendererComponent.cullMode = cullMode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tctx.entityData.waterRenderer = waterRenderer;\n\t\t}\n\t});\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tctx.world.gooRunner.renderSystem.preRenderers.length = 0;\n};\n\nvar update = function(args, ctx, goo) {\n};\n\nvar parameters = [\n{\n\tkey: 'useRefraction',\n\tname: 'useRefraction',\n\ttype: 'boolean',\n\tdefault: false\n},\n{\n\tkey: 'tex',\n\tname: 'Texture',\n\ttype: 'texture',\n\tdefault: null\n},\n{\n\tkey: 'divider',\n\tname: 'Divider',\n\ttype: 'int',\n\tmin: 1,\n\tmax: 5,\n\tdefault: 2\n},\n{\n\tkey: 'timeMultiplier',\n\tname: 'timeMultiplier',\n\ttype: 'float',\n\tmin: 0.0,\n\tmax: 10,\n\tprecision: 3,\n\tscale: 0.1,\n\tdefault: 1\n},\n{\n\tkey: 'distortionMultiplier',\n\tname: 'distortionMultiplier',\n\ttype: 'float',\n\tmin: 0.01,\n\tmax: 1,\n\tprecision: 3,\n\tscale: 0.1,\n\tdefault: 0.04\n},\n{\n\tkey: 'fresnelPow',\n\tname: 'fresnelPow',\n\ttype: 'float',\n\tmin: 0.01,\n\tmax: 10,\n\tprecision: 3,\n\tscale: 0.1,\n\tdefault: 1.5\n},\n{\n\tkey: 'normalMultiplier',\n\tname: 'normalMultiplier',\n\ttype: 'float',\n\tmin: 0.01,\n\tmax: 1,\n\tprecision: 3,\n\tscale: 0.1,\n\tdefault: 1\n},\n{\n\tkey: 'fresnelMultiplier',\n\tname: 'fresnelMultiplier',\n\ttype: 'float',\n\tmin: 0.01,\n\tmax: 1,\n\tprecision: 3,\n\tscale: 0.1,\n\tdefault: 0.5\n},\n{\n\tkey: 'waterScale',\n\tname: 'WaterScale',\n\ttype: 'float',\n\tcontrol: 'slider',\n\tmin: 1,\n\tmax: 50,\n\tprecision: 3,\n\tdefault: 20\n},\n{\n\tkey: 'waterColor',\n\tname: 'WaterColor',\n\ttype: 'vec3',\n\tcontrol: 'color',\n\tdefault: [0.1, 0.2, 0.3]\n},\n{\n\tkey: 'doFog',\n\tname: 'doFog',\n\ttype: 'boolean',\n\tdefault: false\n},\n{\n\tkey: 'fogColor',\n\tname: 'FogColor',\n\ttype: 'vec3',\n\tcontrol: 'color',\n\tdefault: [1, 1, 1]\n},\n{\n\tkey: 'fogStart',\n\tname: 'fogStart',\n\ttype: 'float',\n\tmin: 0.0,\n\tmax: 10000,\n\tprecision: 3,\n\tscale: 0.1,\n\tdefault: 500\n},\n{\n\tkey: 'fogScale',\n\tname: 'fogScale',\n\ttype: 'float',\n\tmin: 0.0,\n\tmax: 10000,\n\tprecision: 3,\n\tscale: 0.1,\n\tdefault: 2000\n},\n{\n\tkey: 'sunShininess',\n\tname: 'sunShininess',\n\ttype: 'float',\n\tmin: 0.0,\n\tmax: 500,\n\tprecision: 3,\n\tscale: 0.1,\n\tdefault: 150\n},\n{\n\tkey: 'sunSpecPower',\n\tname: 'sunSpecPower',\n\ttype: 'float',\n\tmin: 0.0,\n\tmax: 10,\n\tprecision: 3,\n\tscale: 0.1,\n\tdefault: 1\n},\n{\n\tkey: 'sunColor',\n\tname: 'sunColor',\n\ttype: 'vec3',\n\tcontrol: 'color',\n\tdefault: [1.0, 1.0, 0.5]\n},\n{\n\tkey: 'sunDirection',\n\tname: 'sunDirection',\n\ttype: 'vec3',\n\tdefault: [0, 1, 0.1]\n}\n];\n\n/**\n * Parameters defined here will be available on the 'args' object as 'args.key'\n * and customizable using the script panel. Parameters are defined like below.\n * 'key', 'type', and 'default' are required properties.\n * {\n *   key: string,\n *   name: string,\n *   type: enum ('int', 'float', 'string', 'boolean', 'vec3'),\n *   control: enum (\n *    'slider', // Slider with min and max values.\n *    'color',  // Color picker for RGB vec3.\n *    'select', // Used together with the 'options' property.\n *   ),\n *   description: string, // Short tooltip description of the parameter.\n *   options: *[], // Array of values of specified type.\n *   default: *, // Preselected value. One of the options if options are used.\n *   min: number, // Can be used when data type is float or int.\n *   max: number, // Can be used when data type is float or int.\n *   precision: number, // Number of significant digits for float values.\n *   scale: number, // How fast number values change when dragging slider.\n *   exponential: boolean // Can be used together with slider.\n * }\n */\n \n", "name": "Water Script", "license": "CC0", "created": "2015-06-25T08:21:43.572303+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-06-25T08:21:45.417556+00:00", "dependencies": {"https://code.gooengine.com/0.14.2/lib/waterpack.js": {"url": "https://code.gooengine.com/0.14.2/lib/waterpack.js", "sortValue": 0}}, "id": "79c0ed21b259418eb5e957a5e29e7b16.script"}, "52f012c389084ce2940b15bfb77f2050.entity": {"name": "counter", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-01-19T19:54:24.451Z", "dataModelVersion": 2, "modified": "2016-01-19T19:54:24.451Z", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "script": {"scripts": {"8248a29594af4754adb5cbc59bb27ce8.scriptinstance": {"id": "8248a29594af4754adb5cbc59bb27ce8.scriptinstance", "name": "counter", "scriptRef": "3a4f5a6eb9494bcd98f12ebfe675fa71.script", "sortValue": 0, "options": {"enabled": false, "keep": false}}}}}, "hidden": false, "id": "52f012c389084ce2940b15bfb77f2050.entity"}, "84dbb8027ef44dd89bd055c66b32a03d.script": {"body": "'use strict';\n\n/* global goo */\n\nvar setup = function (args, ctx) {\n\tctx.count = 0;\n\tctx.objects = [];\n\tctx.matArray = [];\n\t\n\tctx.meshData = new goo.DoubleQuad(0.5, 0.5, 1, 1);\n// \tctx.meshData.setRotation(-90,0,0);\n// \tctx.mat = new goo.Material(goo.ShaderLib.textured);\n// \tctx.mat.blendState.blending = 'TransparentBlending';\n//     ctx.mat.renderQueue = goo.RenderQueue.TRANSPARENT;\n//     ctx.mat.depthState.enabled = true;\n//     ctx.mat.cullState.enabled = true;\n//     ctx.mat.depthState.write = true;\n\t\n\tvar scale = ctx.entity.getScale().data;\n\tctx.ratio = scale[0] / scale[1];\n\t\n\t// Calculate texture size depending on ratio\n\tctx.size = [args.texSize, args.texSize];\n\tvar pot;\n\tif (ctx.ratio > 2) {\n\t\tpot = goo.MathUtils.nearestHigherPowerOfTwo(ctx.ratio);\n\t\tpot = Math.min(pot, 4096);\n\t\tctx.size[0] *= pot / 2;\n\t\tctx.ratio /= (pot / 2);\n\t} else if (ctx.ratio < 0.5) {\n\t\tpot = goo.MathUtils.nearestHigherPowerOfTwo(1 / ctx.ratio);\n\t\tpot = Math.min(pot, 4096);\n\t\tctx.size[1] *= pot / 2;\n\t\tctx.ratio *= (pot / 2);\n\t}\n\n};\n\nvar cleanup = function (args, ctx) {\n\tfor (var k in ctx.objects) {\n\t\tctx.objects[k].removeFromWorld();\n\t}\n};\n\nvar update = function (args, ctx) {\n\tctx.musicTime = goo.World.time - ctx.entityData.musicStart;\n\tif(ctx.entityData.comments)\n\t\t{\n\t\t\tfor (var i=0; i<ctx.entityData.comments.length; i++) {\n\t\t\t\tif (Math.ceil(ctx.entityData.comments[i].timestamp/10) == Math.ceil(ctx.musicTime*100)) {\n \t\t\t\t\tctx.texture = createTexture(goo, ctx.size[0], ctx.size[1], ctx.ratio);\n\t\t\t\t\tctx.texture.setStyle({\n\t\t\t\t\t\ttextAlign: args.textAlign,\n\t\t\t\t\t\tverticalAlign: args.verticalAlign,\n\t\t\t\t\t\tlineHeight: args.lineHeight,\n\t\t\t\t\t\tfont: args.font,\n\t\t\t\t\t\tmargin: args.margin,\n\t\t\t\t\t\twordWrap: args.wordWrap\n\t\t\t\t\t});\n\t\t\t\t\tctx.mat = new goo.Material('textShader',textShader);\n\t\t\t\t\tctx.mat.blendState.blending = 'TransparentBlending';\n\t\t\t\t\tctx.mat.renderQueue = goo.RenderQueue.TRANSPARENT;\n\t\t\t\t\tctx.mat.depthState.enabled = false;\n\t\t\t\t\tctx.mat.cullState.enabled = false;\n\t\t\t\t\tctx.mat.depthState.write = false;\n\t\t\t\t\t\n\t\t\t\t\tctx.texture.setText(ctx.entityData.comments[i].body);\n\t\t\t\t\tctx.mat.setTexture('DIFFUSE_MAP', ctx.texture);\n\t\t\t\t\t\n\t\t\t\t\tctx.objects.push(ctx.world.createEntity(ctx.meshData, ctx.mat, [ (Math.random(i)-0.5)*4, Math.random(i)/2+0.3, 4]).setRotation(0,3.1,0).addToWorld());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t \tfor (var j in ctx.objects) {\n\t\t\t\t\t\tctx.objects[j].addTranslation( 0, 0, -ctx.world.tpf*1.5); \n\t\t\t\t\tif (ctx.objects[j].transformComponent.transform.translation.z < -4) {\n\t\t\t\t\t\tctx.objects[j].removeFromWorld();\n\t\t\t\t\t}\n\t\t\t}\n};\n\nvar parameters = [\n{\n\tkey: 'text',\n\ttype: 'string',\n\t'default': 'Hello world!'\n}, {\n\tkey: 'transparent',\n\ttype: 'boolean',\n\t'default': true\n}, {\n\tkey: 'wordWrap',\n\ttype: 'boolean',\n\t'default': true\n}, {\n\tkey: 'textAlign',\n\ttype: 'string',\n\tcontrol: 'select',\n\toptions: ['left', 'center', 'right'],\n\t'default': 'center'\n}, {\n\tkey: 'verticalAlign',\n\ttype: 'string',\n\tcontrol: 'select',\n\toptions: ['top', 'middle', 'bottom'],\n\t'default': 'middle'\n}, {\n\tkey: 'font',\n\ttype: 'string',\n\tcontrol: 'select',\n\toptions: ['Roboto', 'Helvetica', 'Times'],\n\t'default': 'Roboto'\n}, {\n\tkey: 'margin',\n\ttype: 'int',\n\tmin: 0,\n\t'default': 0\n}, {\n\tkey: 'lineHeight',\n\ttype: 'float',\n\tmin: 0.1,\n\t'default': 1.3\n}, {\n\tkey: 'texSize',\n\ttype: 'float',\n\tcontrol: 'select',\n\toptions: [128, 256, 512, 1024, 2048],\n\t'default': 512\n}\t\n];\n\nfunction createTexture(goo, width, height, ratio) {\n\tvar canvas = document.createElement('canvas');\n\tcanvas.width = width;\n\tcanvas.height = height;\n\tvar context = canvas.getContext('2d');\n\tvar totalMaxHeight = height / ratio;\n\t\n\t// Modifyables\n\tvar style = {\n\t\ttextAlign: 'left',\n\t\tverticalAlign: 'bottom',\n\t\tlineHeight: 1.3,\n\t\tfont: 'Roboto',\n\t\tmargin: 0,\n\t\tbackground: 'transparent',\n\t\twordWrap: true\n\t};\n\tvar text = {\n\t\tvalue: 'Hello world'\n\t};\n\tvar fontSize = 20;\n\t\n\t// Texture;\n\tvar tex = new goo.Texture(canvas);\n\ttex.setStyle = function(obj) {\n\t\tfor (var key in style) {\n\t\t\tif (obj[key] !== undefined) {\n\t\t\t\tstyle[key] = obj[key];\n\t\t\t}\n\t\t}\n\t\tthis._update();\n\t};\n\ttex.setText = function (str) {\n\t\ttext.value = str;\n\t\tthis._update();\n\t};\n\ttex._update = function () {\n\t\tthis._updateStyle();\n\t\tthis._printText();\n\t\tthis.setNeedsUpdate();\n\t};\n\ttex._clear = function() {\n\t\tif (style.background === 'transparent') {\n\t\t\tcontext.clearRect(0, 0, width, totalMaxHeight);\n\t\t} else {\n\t\t\tcontext.fillStyle = 'rgb(' + style.background.join(',') + ')';\n\t\t\tcontext.rect(0, 0, width, totalMaxHeight);\n\t\t\tcontext.fill();\n\t\t\tcontext.fillStyle = '#FFF';\n\t\t}\n\t};\n\ttex._updateStyle = function() {\n\t\t// Fixed\n\t\tcontext.fillStyle = '#FFF';\n\t\tcontext.textBaseline = 'bottom';\n\t\t\n\t\t//Custom\n\t\tcontext.textAlign = style.textAlign;\n\t\tcontext.font = fontSize + 'px ' + style.font;\n\t};\n\ttex._printText = function () {\n\t\tthis._updateStyle();\n\t\tcontext.save();\n\t\tcontext.scale(1, ratio);\n\n\t\tvar maxWidth = width - style.margin * 2;\n\t\tvar maxHeight = totalMaxHeight - style.margin * 2;\n\t\tvar lineHeight = style.lineHeight * fontSize;\n\n\t\tif (!style.wordWrap) {\n\t\t\tvar lineWidth = context.measureText(text.value).width;\n\t\t\tfontSize *= Math.min (maxWidth / lineWidth, maxHeight / lineHeight);\n\t\t\tlineHeight = style.lineHeight * fontSize;\n\t\t\tcontext.font = fontSize + 'px ' + style.font;\n\t\t\tvar x, y;\n\t\t\tif (style.verticalAlign === 'top') { y = lineHeight + style.margin; } \n\t\t\telse if (style.verticalAlign === 'middle') { y = (totalMaxHeight + lineHeight) / 2; }\n\t\t\telse if (style.verticalAlign === 'bottom') { y = totalMaxHeight - style.margin; }\n\t\t\tif (style.textAlign === 'left') { x = style.margin; }\n\t\t\telse if (style.textAlign === 'center') { x = width / 2; }\n\t\t\telse if (style.textAlign === 'right') { x = width - style.margin; }\n\t\t\tthis._clear();\n\t\t\tcontext.fillText(text.value, x, y);\n\t\t} else {\n\t\t\tvar size = {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0\n\t\t\t};\n\t\t\tvar offset = {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0\n\t\t\t};\n\t\t\tvar iterations = 0;\n\t\t\twhile (iterations < 100 && (\n\t\t\t\tsize.height > maxHeight || \n\t\t\t\tsize.height < maxHeight - lineHeight ||\n\t\t\t\tsize.width > maxWidth\n\t\t\t)) {\n\t\t\t\tif (size.width > maxWidth) {\n\t\t\t\t\tfontSize *= maxWidth / size.width;\n\t\t\t\t\tcontext.font = fontSize + 'px ' + style.font;\n\t\t\t\t} else if (size.height > 0) {\n\t\t\t\t\t// Update font size to fill\n\t\t\t\t\tfontSize *= 0.5 + (1 - maxHeight / size.height) * -0.1;\n\t\t\t\t\tcontext.font = fontSize + 'px ' + style.font;\n\t\t\t\t}\n\t\t\t\tlineHeight = style.lineHeight * fontSize;\n\t\t\t\tif (style.textAlign === 'left') { offset.x = style.margin; }\n\t\t\t\telse if (style.textAlign === 'center') { offset.x = width / 2; }\n\t\t\t\telse if (style.textAlign === 'right') { offset.x = width - style.margin; }\n\t\t\t\tthis._wrapText(size, offset, false);\n\t\t\t\t\n\t\t\t\titerations++;\n\t\t\t}\n\t\t\tif (style.verticalAlign === 'top') { offset.y = style.margin; } \n\t\t\telse if (style.verticalAlign === 'middle') { offset.y = (totalMaxHeight - size.height) / 2; }\n\t\t\telse if (style.verticalAlign === 'bottom') { offset.y = totalMaxHeight - style.margin - size.height; }\n\t\t\tthis._clear();\n\t\t\tthis._wrapText(size, offset, true);\n\t\t}\n\t\tcontext.restore();\n\t};\n\ttex._wrapText = function(size, offset, print) {\n\t\tvar lineHeight = fontSize * style.lineHeight;\n\t\tvar maxWidth = width - style.margin * 2;\n\n\t\tsize.width = 0;\n\t\tsize.height = offset.y;\n\t\tcontext.font = fontSize + 'px ' + style.font;\n\n\t\tvar lines = text.value.split('\\n');\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tsize.height += lineHeight;\n\t\t\tvar line = lines[i];\n\t\t\tvar words = line.split(' ');\n\t\t\tvar outLine = '';\n\t\t\tfor (var j = 0; j < words.length; j++) {\n\t\t\t\tvar testLine = outLine + words[j] + ' ';\n\t\t\t\tvar w = context.measureText(testLine).width;\n\t\t\t\t// If line+word exceeds width, print the line and start a new one\n\t\t\t\tif (w > maxWidth) {\n\t\t\t\t\tif (j === 0) {\n\t\t\t\t\t\tsize.width = Math.max(size.width, w);\n\t\t\t\t\t}\n\t\t\t\t\tif (print) { context.fillText(outLine, offset.x, size.height); }\n\t\t\t\t\toutLine = words[j] + ' ';\n\t\t\t\t\tsize.height += lineHeight;\n\t\t\t\t} else {\n\t\t\t\t\toutLine = testLine;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsize.width = Math.max(size.width, context.measureText(outLine).width);\n\t\t\t// Print the last line\n\t\t\tif (print) { context.fillText(outLine, offset.x, size.height); }\n\t\t}\n\t};\n\treturn tex;\n}\n\nvar textShader = {\n    defines: {\n        SHADOW_TYPE: 0,\n\t\tFOG: true\n    },\n    attributes: {\n        vertexPosition: goo.MeshData.POSITION,\n        vertexUV0: goo.MeshData.TEXCOORD0,\n    },\n    uniforms: {\n        viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n        worldMatrix: goo.Shader.WORLD_MATRIX,\n        diffuseMap: goo.Shader.DIFFUSE_MAP,\n\t\tfogSettings: goo.ShaderBuilder.FOG_SETTINGS,\n\t\tfogColor: goo.ShaderBuilder.FOG_COLOR,\n        transparency: true\n    },\n    vshader: [\n        'attribute vec3 vertexPosition;',\n        'attribute vec2 vertexUV0;',\n\n        'uniform mat4 viewProjectionMatrix;',\n        'uniform mat4 worldMatrix;',\n\t\t\"uniform vec3 cameraPosition;\",\n\n        'varying vec2 texCoord0;',\n\t\t\"varying vec3 viewPosition;\",\n\n\n        'void main(void) {',\n            'mat4 wMatrix = worldMatrix;',\n            'texCoord0 = vertexUV0;',\n\t\t\t\"vec4 worldPos = wMatrix * vec4(vertexPosition, 1.0);\",\n            'gl_Position = viewProjectionMatrix * worldPos;',\n\t\t\t\"viewPosition = cameraPosition - worldPos.xyz;\",\n        '}'\n    ].join('\\n'),\n    fshader: [\n        'uniform sampler2D diffuseMap;',\n        'uniform bool transparency;',\n\t\t\"varying vec3 viewPosition;\",\n\n        'varying vec2 texCoord0;',\n\t\t\n\t\t'#ifdef FOG',\n\t\t'uniform vec2 fogSettings;',\n\t\t'uniform vec3 fogColor;',\n\t\t'#endif',\n\n        'void main(void) {',\n// \t\t\t'gl_FragColor = vec4(1.0,1.0,1.0,1.0);',\n\t\t\t'gl_FragColor = texture2D(diffuseMap, texCoord0);',\n\t\t\t'#ifdef FOG',\n\t\t\t'float d = pow(smoothstep(fogSettings.x, fogSettings.y, length(viewPosition)+0.3), 1.0);',\n\t\t\t'gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.1,0.1,0.1), d);',\n\t\t\t'#endif',\n        '}'\n    ].join('\\n')\n};", "name": "comments_texture", "license": "CC0", "created": "2016-02-11T13:31:18.148Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-02-11T13:31:18.148Z", "id": "84dbb8027ef44dd89bd055c66b32a03d.script"}, "6c30ac6a5dc84daf8d6f25ae52499a94.entity": {"name": "Html Entity", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-01-27T16:25:56.710Z", "dataModelVersion": 2, "modified": "2016-01-27T16:25:56.710Z", "static": false, "components": {"html": {"imageRefs": {}, "pixelPerfect": true, "useTransformComponent": false, "innerHtml": "<link href='//fonts.googleapis.com/css?family=Roboto:100&subset=cyrillic,latin' rel='stylesheet' type='text/css'>\n<style>\n#title{\nfont-size: 24px;\nfont-family: 'Roboto', sans-serif;\npadding: 40px; margin: 0;\ncolor: white;\n}\n#link{\nfont-size: 24px;\nfont-family: 'Roboto', sans-serif;\npadding: 40px; margin: 0;\ncolor: white;\ncursor: pointer; cursor: hand; \n}\n#link:hover\t{\nfont-size: 24px;\nfont-family: 'Roboto', sans-serif;\npadding: 40px; margin: 0;\ncolor: blue;\ncursor: pointer; cursor: hand; \n}\n.comments{\nfont-size: 16px;\nfont-family: 'Roboto', sans-serif;\ncolor: white;\nwidth: 200px;\ntext-align: center;\n}\n.related{\nfont-size: 12px;\nfont-family: 'Roboto', sans-serif;\ncolor: white;\nwidth: 200px;\nposition: absolute;\ntext-align: center;\n}\n.related:hover{\ncolor: white;\nfont-size: 12px;\ncursor: pointer; cursor: hand; \n}\n.hide{\ndisplay: none;\n}\n</style>\n<p id = \"title\">\n\tLoading music from SoundCloud\n</p>\n\n<!-- Hints:\n + It is not recommended to use <script> tags - they can be evil. Consider using the Script Component instead.\n-->"}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "script": {"scripts": {"7c6b0802cda84d319bdd89c65f4d461e.scriptinstance": {"id": "7c6b0802cda84d319bdd89c65f4d461e.scriptinstance", "name": "Instance of Script 2", "scriptRef": "200573169c59499e8a9517df7bf86def.script", "sortValue": 0, "options": {"enabled": true}}}}}, "hidden": false, "id": "6c30ac6a5dc84daf8d6f25ae52499a94.entity"}, "bd43f5e55e5f48129aa880cbb8d826b9.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "imageRef": "75202fa78b2505cd26136ec764148f351bf26ad0.png", "license": "CC0", "flipY": true, "deleted": false, "name": "e9f8b43ec479bb57a356cce44e5459045b324f87.png", "magFilter": "Bilinear", "created": "2015-06-25T08:21:43.760611+00:00", "dataModelVersion": 2, "modified": "2015-06-25T08:21:45.502367+00:00", "repeat": [1, 1], "offset": [0, 0], "id": "bd43f5e55e5f48129aa880cbb8d826b9.texture", "generateMipmaps": true, "anisotropy": 1, "wrapT": "Repeat"}, "a49955674ace4cb6b7d0527c8a26d0d2.posteffects": {"name": "Post effects", "license": "CC0", "created": "2015-11-19T08:56:29.659Z", "deleted": false, "modified": "2015-11-19T08:56:29.659Z", "dataModelVersion": 2, "posteffects": {}, "id": "a49955674ace4cb6b7d0527c8a26d0d2.posteffects"}, "f610fc0ef7da42849c463c5acddaba32.script": {"body": "'use strict';\n\n/* global goo */\nvar addBarycentric = function (entity) {\n    entity.meshDataComponent.meshData = entity.meshDataComponent.meshData.buildFlatMeshData();\n    var meshData = entity.meshDataComponent.meshData;\n\n    meshData.attributeMap.BARYCENTRIC = goo.MeshData.createAttribute(3, 'Float');\n    meshData.rebuildData(meshData.vertexCount, 0, true);\n\n    var barycentricBuffer = meshData.getAttributeBuffer('BARYCENTRIC');\n    var vertexCount = meshData.vertexCount;\n    for (var a = 0; a < vertexCount; a += 3) {\n    barycentricBuffer[a * 3 + 0] = 1;\n        barycentricBuffer[a * 3 + 1] = 10;\n        barycentricBuffer[a * 3 + 2] = 1;\n        barycentricBuffer[a * 3 + 3] = 1;\n        barycentricBuffer[a * 3 + 4] = 15;\n        barycentricBuffer[a * 3 + 5] = 1;\n        barycentricBuffer[a * 3 + 6] = 1;\n        barycentricBuffer[a * 3 + 7] = 1;\n        barycentricBuffer[a * 3 + 8] = 1;\n    }\n};\n\n// function clamp(value, min, max){\n// \treturn Math.min(Math.max(value, min), max);\n// }\n\t\nvar setup = function (args, ctx) {\n\t\n\tctx.pos = function(c) {\n\t\tvar r = Math.random(c);\n\t\tif (r<0.5) {r=-r-0.1;}\n\t\telse {r+=0.1;}\n\t\tr*=10;\n\t\treturn r;\n\t};\n\n\tvar wireShaderDef = {\n    defines: {\n        SHADOW_TYPE: 0,\n    },\n    attributes: {\n        vertexPosition: goo.MeshData.POSITION,\n\t\tvertexNormal: goo.MeshData.NORMAL,\n        vertexUV0: goo.MeshData.TEXCOORD0,\n        barycentric: 'BARYCENTRIC'\n    },\n    uniforms: {\n        viewProjectionMatrix: goo.Shader.VIEW_PROJECTION_MATRIX,\n        worldMatrix: goo.Shader.WORLD_MATRIX,\n        diffuseMap: goo.Shader.DIFFUSE_MAP,\n        lineWidth: 1,\n        baseColor: [0.2, 0.2, 0.2],\n\t\tfogColor: [0.5, 0.5, 0.5],\n        lineColor: [1.0, 1.0, 1.0],\n        transparency: false,\n\t\tindexUniform : 1.0,\n    },\n    vshader: [\n        'attribute vec3 vertexPosition;',\n\t\t\"attribute vec3 vertexNormal;\",\n        'attribute vec2 vertexUV0;',\n        'attribute vec3 barycentric;',\n\n        'uniform mat4 viewProjectionMatrix;',\n        'uniform mat4 worldMatrix;',\n\t\t'uniform float indexUniform;',\n\n        'varying vec2 texCoord0;',\n// \t\t'varying vec3 viewPosition;',\n\t\t'varying vec4 worldPos;',\n        'varying vec3 vBC;',\n\t\t\n// \t\t'float Hash(float n) {',\n//             'return fract( (1.0 + cos(n)) * 415.92653);}',\t\n//         'float Noise2d( in vec2 x ){',\n//             'float xhash = Hash( x.x * 17.0 );',\n//             'float yhash = Hash( x.y * 57.0 );',\n//             'return fract( xhash + yhash );}',\n            \n\t\t\n\n// 'vec3 mod289(vec3 x) {',\n// '  return x - floor(x * (1.0 / 289.0)) * 289.0;',\n// '}',\n// 'vec2 mod289(vec2 x) {',\n// '  return x - floor(x * (1.0 / 289.0)) * 289.0;',\n// '}',\n// 'vec3 permute(vec3 x) {',\n// '  return mod289(((x*34.0)+1.0)*x);',\n// '}',\n// 'float snoise(vec2 v)',\n// '  {',\n// '  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0',\n// '                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)',\n// '                     -0.577350269189626,  // -1.0 + 2.0 * C.x',\n// '                      0.024390243902439); // 1.0 / 41.0',\n// // First corner',\n// '  vec2 i  = floor(v + dot(v, C.yy) );',\n// '  vec2 x0 = v -   i + dot(i, C.xx);',\n// // Other corners',\n// '  vec2 i1;',\n// '  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);',\n// '  vec4 x12 = x0.xyxy + C.xxzz;',\n// '  x12.xy -= i1;',\n// // Permutations',\n// '  i = mod289(i);', \n// // Avoid truncation effects in permutation\n// '  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))',\n// '\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));',\n// '  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);',\n// '  m = m*m ;',\n// '  m = m*m ;',\n// // Gradients: 41 points uniformly over a line, mapped onto a diamond.',\n// // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)',\n// '  vec3 x = 2.0 * fract(p * C.www) - 1.0;',\n// '  vec3 h = abs(x) - 0.5;',\n// '  vec3 ox = floor(x + 0.5);',\n// '  vec3 a0 = x - ox;',\n// '  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );',\n// // Compute final noise value at P',\n// '  vec3 g;',\n// '  g.x  = a0.x  * x0.x  + h.x  * x0.y;',\n// '  g.yz = a0.yz * x12.xz + h.yz * x12.yw;',\n// '  return 130.0 * dot(m, g);',\n// '}',\n\n// 'vec3 mod289(vec3 x) {',\n// '  return x - floor(x * (1.0 / 289.0)) * 289.0;',\n// '}',\n// 'vec4 mod289(vec4 x) {',\n// '  return x - floor(x * (1.0 / 289.0)) * 289.0;',\n// '}',\n// 'vec4 permute(vec4 x) {',\n// '     return mod289(((x*34.0)+1.0)*x);',\n// '}',\n// 'vec4 taylorInvSqrt(vec4 r)',\n// '{',\n// '  return 1.79284291400159 - 0.85373472095314 * r;',\n// '}',\n// 'float snoise(vec3 v)',\n// '  { ',\n// '  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;',\n// '  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);',\n// '// First corner',\n// '  vec3 i  = floor(v + dot(v, C.yyy) );',\n// '  vec3 x0 =   v - i + dot(i, C.xxx) ;',\n// '// Other corners',\n// '  vec3 g = step(x0.yzx, x0.xyz);',\n// '  vec3 l = 1.0 - g;',\n// '  vec3 i1 = min( g.xyz, l.zxy );',\n// '  vec3 i2 = max( g.xyz, l.zxy );',\n// '  //   x0 = x0 - 0.0 + 0.0 * C.xxx;',\n// '  //   x1 = x0 - i1  + 1.0 * C.xxx;',\n// '  //   x2 = x0 - i2  + 2.0 * C.xxx;',\n// '  //   x3 = x0 - 1.0 + 3.0 * C.xxx;',\n// '  vec3 x1 = x0 - i1 + C.xxx;',\n// '  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y',\n// '  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y',\n// '// Permutations',\n// '  i = mod289(i); ',\n// '  vec4 p = permute( permute( permute( ',\n// '             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))',\n// '           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) ',\n// '           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));',\n// '// Gradients: 7x7 points over a square, mapped onto an octahedron.',\n// '// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)',\n// '  float n_ = 0.142857142857; // 1.0/7.0',\n// '  vec3  ns = n_ * D.wyz - D.xzx;',\n// '  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)',\n// '  vec4 x_ = floor(j * ns.z);',\n// '  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)',\n// '  vec4 x = x_ *ns.x + ns.yyyy;',\n// '  vec4 y = y_ *ns.x + ns.yyyy;',\n// '  vec4 h = 1.0 - abs(x) - abs(y);',\n// '  vec4 b0 = vec4( x.xy, y.xy );',\n// '  vec4 b1 = vec4( x.zw, y.zw );',\n// '  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;',\n// '  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;',\n// '  vec4 s0 = floor(b0)*2.0 + 1.0;',\n// '  vec4 s1 = floor(b1)*2.0 + 1.0;',\n// '  vec4 sh = -step(h, vec4(0.0));',\n// '  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;',\n// '  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;',\n// '  vec3 p0 = vec3(a0.xy,h.x);',\n// '  vec3 p1 = vec3(a0.zw,h.y);',\n// '  vec3 p2 = vec3(a1.xy,h.z);',\n// '  vec3 p3 = vec3(a1.zw,h.w);',\n// '//Normalise gradients',\n// '  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));',\n// '  p0 *= norm.x;',\n// '  p1 *= norm.y;',\n// '  p2 *= norm.z;',\n// '  p3 *= norm.w;',\n// '// Mix final noise value',\n// '  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);',\n// '  m = m * m;',\n// '  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), ',\n// '                                dot(p2,x2), dot(p3,x3) ) );',\n// '  }',\n'vec4 mod289(vec4 x)',\n'{',\n'  return x - floor(x * (1.0 / 289.0)) * 289.0;',\n'}',\n'vec4 permute(vec4 x)',\n'{',\n'  return mod289(((x*34.0)+1.0)*x);',\n'}',\n'vec4 taylorInvSqrt(vec4 r)',\n'{',\n'  return 1.79284291400159 - 0.85373472095314 * r;',\n'}',\n'vec2 fade(vec2 t) {',\n'  return t*t*t*(t*(t*6.0-15.0)+10.0);',\n'}',\n// Classic Perlin noise\n'float cnoise(vec2 P)',\n'{',\n'  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);',\n'  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);',\n'  Pi = mod289(Pi); // To avoid truncation effects in permutation',\n'  vec4 ix = Pi.xzxz;',\n'  vec4 iy = Pi.yyww;',\n'  vec4 fx = Pf.xzxz;',\n'  vec4 fy = Pf.yyww;',\n'  vec4 i = permute(permute(ix) + iy);',\n'  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;',\n'  vec4 gy = abs(gx) - 0.5 ;',\n'  vec4 tx = floor(gx + 0.5);',\n'  gx = gx - tx;',\n'  vec2 g00 = vec2(gx.x,gy.x);',\n'  vec2 g10 = vec2(gx.y,gy.y);',\n'  vec2 g01 = vec2(gx.z,gy.z);',\n'  vec2 g11 = vec2(gx.w,gy.w);',\n'  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));',\n'  g00 *= norm.x;  ',\n'  g01 *= norm.y;  ',\n'  g10 *= norm.z;  ',\n'  g11 *= norm.w;  ',\n'  float n00 = dot(g00, vec2(fx.x, fy.x));',\n'  float n10 = dot(g10, vec2(fx.y, fy.y));',\n'  float n01 = dot(g01, vec2(fx.z, fy.z));',\n'  float n11 = dot(g11, vec2(fx.w, fy.w));',\n'  vec2 fade_xy = fade(Pf.xy);',\n'  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);',\n'  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);',\n'  return 2.3 * n_xy;',\n'}',\n\t\t\n        'void main(void) {',\n            'mat4 wMatrix = worldMatrix;',\n            'texCoord0 = vertexUV0;',\n            'vBC = barycentric;',\n\t\t\t'vec2 offsetUV = vec2(texCoord0.y+indexUniform*100.0, texCoord0.x+indexUniform*100.0);',\n\t\t\t'offsetUV *= 100.0;',\n\t\t\t\"worldPos = worldMatrix * vec4(vertexPosition, 1.0);\",\n\t\t\t'worldPos.xyz +=vec3(vertexPosition.x*cnoise(offsetUV)*0.5, vertexPosition.y*cnoise(offsetUV+235.0)*0.5, vertexPosition.z*cnoise(offsetUV+135.0)*0.5);',\n\t\t\t\"gl_Position = viewProjectionMatrix * worldPos;\",\n//           'gl_Position = viewProjectionMatrix * wMatrix * vec4(vertexPosition, 1.0);',\n// \t\t\t\"viewPosition = cameraPosition - worldPos.xyz;\",\n        '}'\n    ].join('\\n'),\n    fshader: [\n        'uniform sampler2D diffuseMap;',\n        'uniform float lineWidth;',\n        'uniform vec3 baseColor;',\n        'uniform vec3 lineColor;',\n\t\t'uniform vec3 fogColor;',\n        'uniform bool transparency;',\n\n        'varying vec2 texCoord0;',\n        'varying vec3 vBC;',\n\t\t'varying vec4 worldPos;',\n\n        '#extension GL_OES_standard_derivatives : enable',\n\n        'float edgeFactor() {',\n            'vec3 d = fwidth(vBC);',\n            'vec3 a3 = smoothstep(vec3(0.0), d * lineWidth, vBC);',\n            'return 1.0 - min(min(a3.x, a3.y), a3.z);',\n        '}',\n\n        'void main(void) {',\n            'float edge = edgeFactor();',\n// \t\t\t'vec2 resolution = vec2(400.0,400.0); ',\n// \t\t\t'vec2 position = gl_FragCoord.xy / resolution.xy;',\t\t\t\n            'if (transparency) {',\n                'gl_FragColor = vec4(lineColor, edge);',\n            '} else {',\n// \t\t\t\t'vec3 line = mix(lineColor, fogColor, worldPos.y);',\n                'gl_FragColor.rgb = mix(baseColor, lineColor, edge);',\n//                \t'gl_FragColor.rgb = baseColor;',\n \t\t\t'gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor/1.0, -worldPos.y*0.5+0.5);',\n// \t\t\t\t'gl_FragColor.rgb = gl_FragColor.rgb+fogColor*worldPos.y;',\n                'gl_FragColor.a = 1.0;',\n            '}',\n        '}'\n    ].join('\\n')\n};\n\t\n\t\n\tctx.count = 0;\n\tctx.objects = [];\n\tctx.parentEntity = ctx.world.by.name(\"rotateCenter\").first();\n\t\n\tctx.onClick = function(relatedUrl) {\n// \t\tconsole.log(relatedUrl);\n\t\tgoo.SystemBus.emit('loadSound', relatedUrl);\n\t};\n\t\n\tctx.material = new goo.Material('WireShader', wireShaderDef);\n    ctx.material.uniforms.lineWidth = args.lineWidth;\n    ctx.material.uniforms.baseColor = args.baseColor;\n\tctx.material.uniforms.fogColor = args.fogColor;\n    ctx.material.uniforms.lineColor = args.lineColor;\n    ctx.material.uniforms.transparency = args.transparency;\n    if (args.transparency) {\n        ctx.material.blendState.blending = 'TransparencyBlending';\n        ctx.material.renderQueue = goo.RenderQueue.TRANSPARENT;\n    }\n// \tctx.material = new goo.Material(goo.ShaderLib.simpleLit);\n};\n\nvar update = function (args, ctx) {\n\tctx.musicTime = goo.World.time - ctx.entityData.musicStart;\n\tif(ctx.entityData.related&&ctx.count === 0)\n\t\t{\n// \t\t\tconsole.log(ctx.entityData.related);\n\t\t\tctx.count = 1;\n    for (var i=0; i<ctx.entityData.related.length/2; i++) {\n\t\t\t\tctx.htmlElement = document.createElement('p');\n\t\t\t\tctx.htmlElement.classList.add('related');\n\t\t\t\tctx.htmlElement.innerHTML = ctx.entityData.related[i].title;\n\t\t\t\tdocument.body.appendChild(ctx.htmlElement);\n\n\t\t\t\t(function(index){ // Create a new scope for i\n\t\t\t\t\tctx.htmlElement.addEventListener('click', function() {ctx.onClick(ctx.entityData.related[index].permalink_url);});\n\t\t\t\t})(i);\n\t\t\t\t\n\t\t\t\tvar htmlComponent = new goo.HtmlComponent(ctx.htmlElement);\n\t\t\n\t\t\t\tctx.material.uniforms.indexUniform = function(shaderInfo) {\n\t\t\t\t\tif (shaderInfo.renderable.uniforms && shaderInfo.renderable.uniforms.indexUniform) \t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\treturn shaderInfo.renderable.uniforms.indexUniform;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tvar entity = ctx.world.createEntity(new goo.Sphere(16, 16, Math.random(i)/2), ctx.material, [ ctx.pos(i),  ctx.pos(i+1),  ctx.pos(i+2)], goo.Sphere.TextureModes.Polar).set(htmlComponent).setRotation(0,90,0).addToWorld();\n\t\t\t\tctx.objects.push(entity);\n\t\t\t\taddBarycentric(entity);\n\t\t\t\tentity.uniforms = entity.indexUniform || {};\n\t\t\t\tentity.uniforms.indexUniform = Math.random(i);\n// \t\t\t\tconsole.log(entity);\n\t\t\t}\n\t\t}\n\t\tfor (var j in ctx.objects) {\n\t\t\tvar rnd = 0.05+Math.random(j)*0.1;\n\t\t\tctx.objects[j].addRotation(ctx.world.tpf*rnd, ctx.world.tpf*rnd, 0);\n// \t\t\tctx.objects[j].transformComponent.setUpdated();\n\t\t\tctx.parentEntity.attachChild(ctx.objects[j]);\n// \t\t\tconsole.log(ctx.objects[j]);\n\t\t\tif(ctx.objects[j].transformComponent.worldTransform.translation.y<0) \n\t\t\t\t{\n\t\t\t\t\tctx.objects[j].htmlComponent.hidden = true;\n\t\t\t\t}\n\t\t\telse {ctx.objects[j].htmlComponent.hidden = false;}\n\t\t\t\n\t\t}\n\t\n};\n\nvar cleanup = function (args, ctx) {\n\tfor (var k in ctx.objects) {\n\t\tctx.objects[k].removeFromWorld();\n\t}\n\tfor (var i=0; i<ctx.entityData.related.length/2; i++) {\n\t\tctx.htmlElement.removeEventListener('click', function() {ctx.onClick(ctx.entityData.related[i].permalink_url);});\n\t}\n};\n\nvar parameters = [\n\t{ key: 'lineWidth', type: 'float', default: 1 },\n    { key: 'baseColor', type: 'vec3', control: 'color', default: [0, 0, 0] },\n\t{ key: 'testColor', type: 'vec3', control: 'color', default: [0, 0, 0] },\n\t{ key: 'fogColor', type: 'vec3', control: 'color', default: [0, 0, 0] },\n    { key: 'lineColor', type: 'vec3', control: 'color', default: [1, 1, 1] },\n    { key: 'transparency', type: 'boolean', default: false }\n\t\n];\n", "name": "related", "license": "CC0", "created": "2016-02-08T17:00:37.082Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-02-08T17:00:37.082Z", "id": "f610fc0ef7da42849c463c5acddaba32.script"}, "f6a7ded7783548b9bcefb24d0f91c7e0.entity": {"name": "rotateCenter", "license": "CC0", "created": "2016-02-13T19:18:51.096Z", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2016-02-13T19:18:51.096Z", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 0, 0], "children": {}}, "stateMachine": {"machines": {"220656a00b9b48aaa2847bd9656fc8c6.machine": {"machineRef": "220656a00b9b48aaa2847bd9656fc8c6.machine", "sortValue": 0}}}}, "hidden": false, "id": "f6a7ded7783548b9bcefb24d0f91c7e0.entity"}, "ca1948c7c7fb481ea7932392b6551e87.entity": {"name": "sound_terrain", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-01-16T17:52:42.179Z", "dataModelVersion": 2, "modified": "2016-01-16T17:52:42.179Z", "static": false, "components": {"sound": {"volume": 1, "reverb": 0}, "meshData": {"shape": "Box", "shapeOptions": {"textureMode": "Uniform"}}, "transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0.001, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"33fa48e5c0dd483ca4992c9ef2000719.material": {"materialRef": "33fa48e5c0dd483ca4992c9ef2000719.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"ada4a7a76d3a4335b689d44ef20b9615.scriptinstance": {"id": "ada4a7a76d3a4335b689d44ef20b9615.scriptinstance", "name": "Instance of comments 3", "scriptRef": "84dbb8027ef44dd89bd055c66b32a03d.script", "sortValue": 7, "options": {"verticalAlign": "top", "text": "Hello world!", "enabled": true, "textAlign": "left", "wordWrap": true, "lineHeight": 1, "font": "Helvetica", "margin": 5, "transparent": true, "texSize": 512}}, "39b58157ff3a456e80c683691c7dc81e.scriptinstance": {"id": "39b58157ff3a456e80c683691c7dc81e.scriptinstance", "name": "Instance of Script", "scriptRef": "041e26d8b95444e3b29420c6a7162ee9.script", "sortValue": 3, "options": {"baseColor": [0, 0, 0], "lineColor": [1, 1, 1], "enabled": true, "gridX": 128, "height": 500, "transparency": false, "lineWidth": 2, "gridZ": 128, "size": [4, 4]}}, "9c8176025a804635aa9f51e9ff959363.scriptinstance": {"id": "9c8176025a804635aa9f51e9ff959363.scriptinstance", "name": "Instance of comments 2", "scriptRef": "1e1773e6066f4ef6b45e53abf528c114.script", "sortValue": 8, "options": {"baseColor": [0, 0, 0], "lineWidth": 1, "enabled": false, "lineColor": [1, 1, 1], "transparency": false}}, "96fdace7e0b84186b6415536fac815b3.scriptinstance": {"id": "96fdace7e0b84186b6415536fac815b3.scriptinstance", "name": "Instance of Visualizer", "scriptRef": "389de32a313a49348482202d15b4d502.script", "sortValue": 2, "options": {"buckets": 512, "enabled": true}}, "2f6d2f1741784c128b982944229aba6f.scriptinstance": {"id": "2f6d2f1741784c128b982944229aba6f.scriptinstance", "name": "Instance of Sound Cloud connector", "scriptRef": "d873a31fb7d44cdf935986da0555c1b9.script", "sortValue": 1, "options": {"url": "https://soundcloud.com/chad-lawson/nocturne-in-f-minor-op-55-no-1-variation-piano-violin-cello", "enabled": true}}, "2462a7b4dfdb428b8c3caa00757ea035.scriptinstance": {"id": "2462a7b4dfdb428b8c3caa00757ea035.scriptinstance", "name": "Instance of Script", "scriptRef": "ec412ed7de3b43828d91798d5ef68fd7.script", "sortValue": 5, "options": {"enabled": true}}, "171c5614117f416b9e3653a1097f02d0.scriptinstance": {"id": "171c5614117f416b9e3653a1097f02d0.scriptinstance", "name": "Instance of sky", "scriptRef": "18f426cf3ffb4ea5b7a392cbad992a29.script", "sortValue": 4, "options": {"enabled": true}}, "99a5e16d14104947b24b63d51ec754d1.scriptinstance": {"id": "99a5e16d14104947b24b63d51ec754d1.scriptinstance", "name": "Instance of related", "scriptRef": "f610fc0ef7da42849c463c5acddaba32.script", "sortValue": 6, "options": {"baseColor": [0.14583333333333337, 0.14583333333333337, 0.14583333333333337], "transparency": false, "enabled": true, "testColor": [1, 0, 0], "fogColor": [0.25416666666666665, 0.25416666666666665, 0.25416666666666665], "lineColor": [0.8375, 0.8375, 0.8375], "lineWidth": 3}}}}}, "hidden": false, "id": "ca1948c7c7fb481ea7932392b6551e87.entity"}, "3434148feda044bfa25f310e68ff70cd.scene": {"canvas": {"resolution": {"width": 1920, "height": 1080}, "mode": "Stretch"}, "initialCameraRef": "35f657ee3acc453c931ee8e2d17ed397.entity", "name": "Copy of sound_terrain_fixed", "license": "PRIVATE", "created": "2016-09-30T10:03:07.046393+00:00", "deleted": false, "id": "3434148feda044bfa25f310e68ff70cd.scene", "thumbnailRef": "c96a2f7bcfbb4a0f7c32fb7edab212f6140e8b17.png", "environmentRef": "0df0a7ce801a437f94a8aae5741c2e17.environment", "dataModelVersion": 2, "modified": "2016-10-12T17:38:26.409578+00:00", "entities": {"83bb5f95b2164acf8187949dd6e08d27.entity": {"entityRef": "83bb5f95b2164acf8187949dd6e08d27.entity", "sortValue": 1}, "f6a7ded7783548b9bcefb24d0f91c7e0.entity": {"entityRef": "f6a7ded7783548b9bcefb24d0f91c7e0.entity", "sortValue": 12}, "ca1948c7c7fb481ea7932392b6551e87.entity": {"entityRef": "ca1948c7c7fb481ea7932392b6551e87.entity", "sortValue": 3}, "52f012c389084ce2940b15bfb77f2050.entity": {"entityRef": "52f012c389084ce2940b15bfb77f2050.entity", "sortValue": 4}, "8537d52f650c483aad9a88aa366bcece.entity": {"entityRef": "8537d52f650c483aad9a88aa366bcece.entity", "sortValue": 7}, "6c30ac6a5dc84daf8d6f25ae52499a94.entity": {"entityRef": "6c30ac6a5dc84daf8d6f25ae52499a94.entity", "sortValue": 11}, "4aadddf09e5b4025a66771c59f706650.entity": {"entityRef": "4aadddf09e5b4025a66771c59f706650.entity", "sortValue": 10}, "796fc9ff440c4407b31444984a4d4be3.entity": {"entityRef": "796fc9ff440c4407b31444984a4d4be3.entity", "sortValue": 9}}, "posteffectsRef": "a49955674ace4cb6b7d0527c8a26d0d2.posteffects", "defaultPackRef": "52ae04ad71484319ae5abe292d90be73.pack", "packs": {"56a663ac284c41218b0ea24a88efeab5.pack": {"packRef": "56a663ac284c41218b0ea24a88efeab5.pack", "sortValue": 7}, "52ae04ad71484319ae5abe292d90be73.pack": {"packRef": "52ae04ad71484319ae5abe292d90be73.pack", "sortValue": 0}, "65c20d098eb245728d5bce6057cf369b.pack": {"packRef": "65c20d098eb245728d5bce6057cf369b.pack", "sortValue": 2}, "ac92131ad7a74647821c293a1e6415ca.pack": {"packRef": "ac92131ad7a74647821c293a1e6415ca.pack", "sortValue": 6}, "eac6f32309264e8f82d4244fa12a2326.pack": {"packRef": "eac6f32309264e8f82d4244fa12a2326.pack", "sortValue": 5}, "1057ae5b0e4a44c69311c6a9ae4d7601.pack": {"packRef": "1057ae5b0e4a44c69311c6a9ae4d7601.pack", "sortValue": 3}}, "editorCameraSettings": {"camera3d": {"spherical": [4.400830404845963, 0.7853981633974483, 0.5235987755982988], "lookAtPoint": [0, 0, 0]}, "camera2d": {"spherical": [2, 1.5707963267948966, 0], "lookAtPoint": [0, 0, 0]}}, "publishedUrl": "https://c1.goote.ch/3434148feda044bfa25f310e68ff70cd.scene", "tags": {}, "published": "2016-10-03T12:10:42.400842+00:00"}, "389de32a313a49348482202d15b4d502.script": {"body": "'use strict';\n\nvar setup = function(args, ctx, goo) {\n\tctx.vizNode = goo.AudioContext.getContext().createAnalyser();\n\tctx.vizNode.fftSize = args.buckets * 2;\n\tctx.vizNode.smoothingTimeConstant = 0.6;\n\tctx.entity.soundComponent._inNode.connect(ctx.vizNode);\n\tctx.entityData.freqFloat = new Float32Array(ctx.vizNode.frequencyBinCount);\n\tctx.entityData.freqByte = new Uint8Array(ctx.vizNode.frequencyBinCount);\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tctx.entity.soundComponent._inNode.disconnect(ctx.vizNode);\n};\n\nvar update = function(args, ctx, goo) {\n\tctx.vizNode.getFloatFrequencyData(ctx.entityData.freqFloat);\n\tctx.vizNode.getByteFrequencyData(ctx.entityData.freqByte);\n};\n\nvar parameters = [{\n\tkey: 'buckets',\n\ttype: 'int',\n\tcontrol: 'select',\n\toptions: [32, 64,128,256,512],\n\t'default': 64\n}];", "name": "Visualizer", "license": "CC0", "created": "2015-06-12T09:12:39.435Z", "deleted": false, "dataModelVersion": 2, "modified": "2015-06-18T09:49:31.651797+00:00", "dependencies": {}, "id": "389de32a313a49348482202d15b4d502.script"}, "220656a00b9b48aaa2847bd9656fc8c6.machine": {"name": "Behavior 2", "license": "CC0", "created": "2016-02-14T00:41:35.164Z", "deleted": false, "dataModelVersion": 2, "initialState": "4b0e8e749e9b4035a33f64ee7f431ff8.state", "states": {"4b0e8e749e9b4035a33f64ee7f431ff8.state": {"id": "4b0e8e749e9b4035a33f64ee7f431ff8.state", "name": "State 1", "actions": {"781bbfdee1e44903b68ed0404269e7f4.action": {"id": "781bbfdee1e44903b68ed0404269e7f4.action", "type": "Rotate", "name": "Rotate", "sortValue": 0, "options": {"relative": true, "everyFrame": true, "transitions": {}, "rotation": [-0.8, -0.2, 0]}}}, "sortValue": 0}}, "modified": "2016-02-14T00:41:35.164Z", "id": "220656a00b9b48aaa2847bd9656fc8c6.machine"}, "200573169c59499e8a9517df7bf86def.script": {"body": "'use strict';\n\n/* global goo */\n\nvar setup = function (args, ctx) {\n};\n\nvar cleanup = function (args, ctx) {\n\n};\n\nvar update = function (args, ctx) {\n\n};\n\nvar parameters = [];", "name": "change_html", "license": "CC0", "created": "2016-01-27T16:39:18.668Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-01-27T16:39:18.668Z", "id": "200573169c59499e8a9517df7bf86def.script"}, "ec412ed7de3b43828d91798d5ef68fd7.script": {"body": "function createSkySphere(goo, ctx, material) {\n     material.cullState.cullFace = 'Front'; // cull the outside, keep the inside\n     material.depthState.enabled = false; // don't change the z-buffer\n     material.renderQueue = 1; // draw this first\n\t material.blendState.blending = 'AdditiveBlending';\n     var skysphere = ctx.world.createEntity(new goo.Sphere(48, 48, 10), material);\n\t skysphere.textureMode = goo.Sphere.TextureModes.Polar;\n      skysphere.isSkybox = true; // activate special handling in renderer and for shadows\n     return skysphere;\n }\n\n var setup = function(args, ctx, goo) {\n\t ctx.deform = 0;\n// \t ctx.world.createEntity(new goo.Box(0.3, 0.3, 0.3), material, [x, 0, y]).addToWorld());\n//      ctx.skySphere = createSkySphere(goo, ctx, material);\n//      ctx.renderSystem = ctx.world.getSystem('RenderSystem');\n//      ctx.renderSystem.added(ctx.skySphere);\n };\n\n var cleanup = function(args, ctx, goo) {\n//      ctx.renderSystem.removed(ctx.skySphere);\n };\n\n var update = function(args, ctx, goo) {\n };\n\n var parameters = [];\n\nvar atmosphere = {\n     attributes: {\n         vertexPosition: goo.MeshData.POSITION,\n         vertexUV0: goo.MeshData.TEXCOORD0\n     },\n     uniforms: {\n         viewMatrix: goo.Shader.VIEW_MATRIX,\n         projectionMatrix: goo.Shader.PROJECTION_MATRIX,\n         worldMatrix: goo.Shader.WORLD_MATRIX,\n         cameraPosition: goo.Shader.CAMERA,\n         near: goo.Shader.NEAR_PLANE,\n         time : function() {return goo.World.time;},\n\t\t deform : function() {return ctx.deform;}\n     },\n     vshader : [\n         'attribute vec3 vertexPosition;',\n         'attribute vec2 vertexUV0;',\n\n         'uniform mat4 viewMatrix;',\n         'uniform mat4 projectionMatrix;',\n         'uniform mat4 worldMatrix;',\n         'uniform vec3 cameraPosition;',\n         'uniform float near;',\n\n         'varying vec2 texCoord0;',\n         'varying vec3 eyeVec;',\n\n         'void main(void) {',\n         '    texCoord0 = vertexUV0;',\n         '    vec4 worldPos = worldMatrix * vec4(vertexPosition * near * 10.0, 1.0);',\n         '    worldPos += vec4(cameraPosition, 0.0);',\n         '    gl_Position = projectionMatrix * viewMatrix * worldPos;',\n         '    eyeVec = cameraPosition - worldPos.xyz;',\n         '}'//\n     ].join('\\n'),\n     fshader : [\n         'uniform float time;',\n\t\t 'uniform float deform;',\n\n         'varying vec2 texCoord0;',\n\n         'vec2 u_k = vec2(10.0,10.0);',\n\t\t 'vec2 u_v = vec2(100.0,100.0);',\n\n         'void main() {',\n\t\t \t'float grad = 0.5/texCoord0.y-1.0+deform/40.0;',\n\t\t  'vec4 gradient = vec4(grad, grad, 1.0, 1.0);',\n         'gl_FragColor = gradient;',\n     '}'].join('\\n')\n};", "name": "atmosphere", "license": "CC0", "created": "2016-02-16T15:00:35.644Z", "deleted": false, "dataModelVersion": 2, "modified": "2016-02-16T15:00:35.644Z", "id": "ec412ed7de3b43828d91798d5ef68fd7.script"}, "8537d52f650c483aad9a88aa366bcece.entity": {"name": "Quad", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-01-21T12:42:00.704Z", "dataModelVersion": 2, "modified": "2016-01-21T12:42:00.704Z", "static": false, "components": {"meshData": {"shape": "Quad"}, "transform": {"rotation": [-90, 0, 0], "scale": [10, 4, 7], "translation": [0, 0.029342129826545715, 3.48985763356836e-18]}, "meshRenderer": {"receiveShadows": true, "materials": {"63a10bc3866944b6ada7c46d267dcebd.material": {"materialRef": "63a10bc3866944b6ada7c46d267dcebd.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"a9d00aa29fd142f386b6f1dfca58066a.scriptinstance": {"id": "a9d00aa29fd142f386b6f1dfca58066a.scriptinstance", "name": "Instance of Script", "scriptRef": "084c28fcfec4441c8e40eeb8192835a0.script", "sortValue": 0, "options": {"enabled": true}}}}}, "hidden": true, "id": "8537d52f650c483aad9a88aa366bcece.entity"}, "4aadddf09e5b4025a66771c59f706650.entity": {"name": "Water Script", "license": "CC0", "tags": {}, "deleted": false, "created": "2016-01-22T13:39:56.419Z", "dataModelVersion": 2, "originalAsset": {"version": "e81fd6e10f2146c3bb169bfb6ada985f", "id": "28f445ec66574467837731ef497643a7"}, "modified": "2016-01-22T13:39:56.419Z", "static": false, "components": {"meshData": {"shape": "Quad"}, "transform": {"rotation": [-90, 0, 0], "scale": [10, 3.6, 10], "translation": [0, 0.045742783695459366, 2.8009379856568865e-18]}, "meshRenderer": {"receiveShadows": true, "materials": {"1216db2f52ae4b099bfe69fdd7262c31.material": {"materialRef": "1216db2f52ae4b099bfe69fdd7262c31.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "script": {"scripts": {"1a60f9f9602e4d3fb9922f2a2d32d91b.scriptinstance": {"id": "1a60f9f9602e4d3fb9922f2a2d32d91b.scriptinstance", "name": "Custom script", "scriptRef": "79c0ed21b259418eb5e957a5e29e7b16.script", "sortValue": 0, "options": {"tex": {"enabled": true, "textureRef": "bd43f5e55e5f48129aa880cbb8d826b9.texture"}, "sunSpecPower": 1, "fresnelPow": 1.5, "doFog": true, "fresnelMultiplier": 0.5, "useRefraction": false, "distortionMultiplier": 0.04, "enabled": true, "fogStart": 2.8, "sunDirection": [0.3, 1, 0], "timeMultiplier": 2, "waterColor": [0.12135416666666665, 0.12135416666666665, 0.12135416666666665], "sunColor": [0.2796875, 0.2796875, 0.2796875], "fogColor": [1, 1, 1], "normalMultiplier": 1, "sunShininess": 150, "divider": 1, "fogScale": 10, "waterScale": 20}}}}}, "hidden": false, "id": "4aadddf09e5b4025a66771c59f706650.entity"}, "0df0a7ce801a437f94a8aae5741c2e17.environment": {"sound": {"dopplerFactor": 0, "maxDistance": 100, "reverb": 0, "rolloffFactor": 0.4, "volume": 1}, "globalAmbient": [0, 0, 0, 0], "license": "CC0", "created": "2015-05-22T14:00:54.770682+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-05-22T14:16:35.688161+00:00", "fog": {"color": [0.6755208333333333, 0.6755208333333333, 0.6755208333333333], "far": 5, "near": 1, "enabled": true}, "backgroundColor": [0, 0, 0, 1], "weather": {"snow": {"velocity": 10, "rate": 10, "enabled": false, "height": 25}}, "id": "0df0a7ce801a437f94a8aae5741c2e17.environment", "name": "Default Environment"}}